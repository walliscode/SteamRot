// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ACTIONS_STEAMROT_RAWDATA_H_
#define FLATBUFFERS_GENERATED_ACTIONS_STEAMROT_RAWDATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace SteamRot {
namespace rawData {

struct Action;
struct ActionBuilder;

struct ActionList;
struct ActionListBuilder;

struct Action FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ActionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SFML_ID = 4,
    VT_ACTION_NAME = 6
  };
  int32_t sfml_id() const {
    return GetField<int32_t>(VT_SFML_ID, 0);
  }
  const ::flatbuffers::String *action_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTION_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SFML_ID, 4) &&
           VerifyOffset(verifier, VT_ACTION_NAME) &&
           verifier.VerifyString(action_name()) &&
           verifier.EndTable();
  }
};

struct ActionBuilder {
  typedef Action Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_sfml_id(int32_t sfml_id) {
    fbb_.AddElement<int32_t>(Action::VT_SFML_ID, sfml_id, 0);
  }
  void add_action_name(::flatbuffers::Offset<::flatbuffers::String> action_name) {
    fbb_.AddOffset(Action::VT_ACTION_NAME, action_name);
  }
  explicit ActionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Action> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Action>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Action> CreateAction(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t sfml_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> action_name = 0) {
  ActionBuilder builder_(_fbb);
  builder_.add_action_name(action_name);
  builder_.add_sfml_id(sfml_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Action> CreateActionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t sfml_id = 0,
    const char *action_name = nullptr) {
  auto action_name__ = action_name ? _fbb.CreateString(action_name) : 0;
  return SteamRot::rawData::CreateAction(
      _fbb,
      sfml_id,
      action_name__);
}

struct ActionList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ActionListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTIONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<SteamRot::rawData::Action>> *actions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<SteamRot::rawData::Action>> *>(VT_ACTIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTIONS) &&
           verifier.VerifyVector(actions()) &&
           verifier.VerifyVectorOfTables(actions()) &&
           verifier.EndTable();
  }
};

struct ActionListBuilder {
  typedef ActionList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_actions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SteamRot::rawData::Action>>> actions) {
    fbb_.AddOffset(ActionList::VT_ACTIONS, actions);
  }
  explicit ActionListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ActionList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ActionList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ActionList> CreateActionList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SteamRot::rawData::Action>>> actions = 0) {
  ActionListBuilder builder_(_fbb);
  builder_.add_actions(actions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ActionList> CreateActionListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<SteamRot::rawData::Action>> *actions = nullptr) {
  auto actions__ = actions ? _fbb.CreateVector<::flatbuffers::Offset<SteamRot::rawData::Action>>(*actions) : 0;
  return SteamRot::rawData::CreateActionList(
      _fbb,
      actions__);
}

inline const SteamRot::rawData::ActionList *GetActionList(const void *buf) {
  return ::flatbuffers::GetRoot<SteamRot::rawData::ActionList>(buf);
}

inline const SteamRot::rawData::ActionList *GetSizePrefixedActionList(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SteamRot::rawData::ActionList>(buf);
}

inline bool VerifyActionListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SteamRot::rawData::ActionList>(nullptr);
}

inline bool VerifySizePrefixedActionListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SteamRot::rawData::ActionList>(nullptr);
}

inline void FinishActionListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SteamRot::rawData::ActionList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedActionListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SteamRot::rawData::ActionList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace rawData
}  // namespace SteamRot

#endif  // FLATBUFFERS_GENERATED_ACTIONS_STEAMROT_RAWDATA_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOADFONTS_STEAMROT_RAWDATA_H_
#define FLATBUFFERS_GENERATED_LOADFONTS_STEAMROT_RAWDATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace SteamRot {
namespace rawData {

struct Font;
struct FontBuilder;

struct FontList;
struct FontListBuilder;

struct Font FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FontBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TAG = 4,
    VT_FILE_NAME = 6
  };
  const ::flatbuffers::String *tag() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TAG);
  }
  const ::flatbuffers::String *file_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILE_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TAG) &&
           verifier.VerifyString(tag()) &&
           VerifyOffset(verifier, VT_FILE_NAME) &&
           verifier.VerifyString(file_name()) &&
           verifier.EndTable();
  }
};

struct FontBuilder {
  typedef Font Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tag(::flatbuffers::Offset<::flatbuffers::String> tag) {
    fbb_.AddOffset(Font::VT_TAG, tag);
  }
  void add_file_name(::flatbuffers::Offset<::flatbuffers::String> file_name) {
    fbb_.AddOffset(Font::VT_FILE_NAME, file_name);
  }
  explicit FontBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Font> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Font>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Font> CreateFont(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> tag = 0,
    ::flatbuffers::Offset<::flatbuffers::String> file_name = 0) {
  FontBuilder builder_(_fbb);
  builder_.add_file_name(file_name);
  builder_.add_tag(tag);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Font> CreateFontDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *tag = nullptr,
    const char *file_name = nullptr) {
  auto tag__ = tag ? _fbb.CreateString(tag) : 0;
  auto file_name__ = file_name ? _fbb.CreateString(file_name) : 0;
  return SteamRot::rawData::CreateFont(
      _fbb,
      tag__,
      file_name__);
}

struct FontList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FontListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FONTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<SteamRot::rawData::Font>> *fonts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<SteamRot::rawData::Font>> *>(VT_FONTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FONTS) &&
           verifier.VerifyVector(fonts()) &&
           verifier.VerifyVectorOfTables(fonts()) &&
           verifier.EndTable();
  }
};

struct FontListBuilder {
  typedef FontList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_fonts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SteamRot::rawData::Font>>> fonts) {
    fbb_.AddOffset(FontList::VT_FONTS, fonts);
  }
  explicit FontListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FontList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FontList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FontList> CreateFontList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SteamRot::rawData::Font>>> fonts = 0) {
  FontListBuilder builder_(_fbb);
  builder_.add_fonts(fonts);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FontList> CreateFontListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<SteamRot::rawData::Font>> *fonts = nullptr) {
  auto fonts__ = fonts ? _fbb.CreateVector<::flatbuffers::Offset<SteamRot::rawData::Font>>(*fonts) : 0;
  return SteamRot::rawData::CreateFontList(
      _fbb,
      fonts__);
}

inline const SteamRot::rawData::FontList *GetFontList(const void *buf) {
  return ::flatbuffers::GetRoot<SteamRot::rawData::FontList>(buf);
}

inline const SteamRot::rawData::FontList *GetSizePrefixedFontList(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SteamRot::rawData::FontList>(buf);
}

inline bool VerifyFontListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SteamRot::rawData::FontList>(nullptr);
}

inline bool VerifySizePrefixedFontListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SteamRot::rawData::FontList>(nullptr);
}

inline void FinishFontListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SteamRot::rawData::FontList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFontListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SteamRot::rawData::FontList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace rawData
}  // namespace SteamRot

#endif  // FLATBUFFERS_GENERATED_LOADFONTS_STEAMROT_RAWDATA_H_

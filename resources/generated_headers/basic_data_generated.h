// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BASICDATA_MYGAME_H_
#define FLATBUFFERS_GENERATED_BASICDATA_MYGAME_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace MyGame {

struct PullData;
struct PullDataBuilder;

struct PullData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PullDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VARIABLE_1 = 4,
    VT_VARIABLE_2 = 6,
    VT_VARIABLE_3 = 8
  };
  const ::flatbuffers::String *variable_1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VARIABLE_1);
  }
  const ::flatbuffers::String *variable_2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VARIABLE_2);
  }
  const ::flatbuffers::String *variable_3() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VARIABLE_3);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VARIABLE_1) &&
           verifier.VerifyString(variable_1()) &&
           VerifyOffset(verifier, VT_VARIABLE_2) &&
           verifier.VerifyString(variable_2()) &&
           VerifyOffset(verifier, VT_VARIABLE_3) &&
           verifier.VerifyString(variable_3()) &&
           verifier.EndTable();
  }
};

struct PullDataBuilder {
  typedef PullData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_variable_1(::flatbuffers::Offset<::flatbuffers::String> variable_1) {
    fbb_.AddOffset(PullData::VT_VARIABLE_1, variable_1);
  }
  void add_variable_2(::flatbuffers::Offset<::flatbuffers::String> variable_2) {
    fbb_.AddOffset(PullData::VT_VARIABLE_2, variable_2);
  }
  void add_variable_3(::flatbuffers::Offset<::flatbuffers::String> variable_3) {
    fbb_.AddOffset(PullData::VT_VARIABLE_3, variable_3);
  }
  explicit PullDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PullData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PullData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PullData> CreatePullData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> variable_1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> variable_2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> variable_3 = 0) {
  PullDataBuilder builder_(_fbb);
  builder_.add_variable_3(variable_3);
  builder_.add_variable_2(variable_2);
  builder_.add_variable_1(variable_1);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PullData> CreatePullDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *variable_1 = nullptr,
    const char *variable_2 = nullptr,
    const char *variable_3 = nullptr) {
  auto variable_1__ = variable_1 ? _fbb.CreateString(variable_1) : 0;
  auto variable_2__ = variable_2 ? _fbb.CreateString(variable_2) : 0;
  auto variable_3__ = variable_3 ? _fbb.CreateString(variable_3) : 0;
  return MyGame::CreatePullData(
      _fbb,
      variable_1__,
      variable_2__,
      variable_3__);
}

inline const MyGame::PullData *GetPullData(const void *buf) {
  return ::flatbuffers::GetRoot<MyGame::PullData>(buf);
}

inline const MyGame::PullData *GetSizePrefixedPullData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MyGame::PullData>(buf);
}

inline bool VerifyPullDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MyGame::PullData>(nullptr);
}

inline bool VerifySizePrefixedPullDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MyGame::PullData>(nullptr);
}

inline void FinishPullDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MyGame::PullData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPullDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MyGame::PullData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace MyGame

#endif  // FLATBUFFERS_GENERATED_BASICDATA_MYGAME_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITIES_STEAMROT_RAWDATA_H_
#define FLATBUFFERS_GENERATED_ENTITIES_STEAMROT_RAWDATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace SteamRot {
namespace rawData {

struct MetaComponent;
struct MetaComponentBuilder;

struct Vector2;
struct Vector2Builder;

struct TransformComponent;
struct TransformComponentBuilder;

struct TextComponent;
struct TextComponentBuilder;

struct Entity;
struct EntityBuilder;

struct EntityList;
struct EntityListBuilder;

struct MetaComponent FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MetaComponentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTIVE = 4
  };
  const ::flatbuffers::String *active() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTIVE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTIVE) &&
           verifier.VerifyString(active()) &&
           verifier.EndTable();
  }
};

struct MetaComponentBuilder {
  typedef MetaComponent Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_active(::flatbuffers::Offset<::flatbuffers::String> active) {
    fbb_.AddOffset(MetaComponent::VT_ACTIVE, active);
  }
  explicit MetaComponentBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MetaComponent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MetaComponent>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MetaComponent> CreateMetaComponent(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> active = 0) {
  MetaComponentBuilder builder_(_fbb);
  builder_.add_active(active);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MetaComponent> CreateMetaComponentDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *active = nullptr) {
  auto active__ = active ? _fbb.CreateString(active) : 0;
  return SteamRot::rawData::CreateMetaComponent(
      _fbb,
      active__);
}

struct Vector2 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vector2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct Vector2Builder {
  typedef Vector2 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Vector2::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Vector2::VT_Y, y, 0.0f);
  }
  explicit Vector2Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vector2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vector2>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vector2> CreateVector2(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f) {
  Vector2Builder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct TransformComponent FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TransformComponentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_VELOCITY = 6
  };
  const SteamRot::rawData::Vector2 *position() const {
    return GetPointer<const SteamRot::rawData::Vector2 *>(VT_POSITION);
  }
  const SteamRot::rawData::Vector2 *velocity() const {
    return GetPointer<const SteamRot::rawData::Vector2 *>(VT_VELOCITY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyOffset(verifier, VT_VELOCITY) &&
           verifier.VerifyTable(velocity()) &&
           verifier.EndTable();
  }
};

struct TransformComponentBuilder {
  typedef TransformComponent Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(::flatbuffers::Offset<SteamRot::rawData::Vector2> position) {
    fbb_.AddOffset(TransformComponent::VT_POSITION, position);
  }
  void add_velocity(::flatbuffers::Offset<SteamRot::rawData::Vector2> velocity) {
    fbb_.AddOffset(TransformComponent::VT_VELOCITY, velocity);
  }
  explicit TransformComponentBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TransformComponent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TransformComponent>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TransformComponent> CreateTransformComponent(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<SteamRot::rawData::Vector2> position = 0,
    ::flatbuffers::Offset<SteamRot::rawData::Vector2> velocity = 0) {
  TransformComponentBuilder builder_(_fbb);
  builder_.add_velocity(velocity);
  builder_.add_position(position);
  return builder_.Finish();
}

struct TextComponent FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TextComponentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT = 4,
    VT_FONT = 6,
    VT_FONT_SIZE = 8
  };
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  const ::flatbuffers::String *font() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FONT);
  }
  int32_t font_size() const {
    return GetField<int32_t>(VT_FONT_SIZE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           VerifyOffset(verifier, VT_FONT) &&
           verifier.VerifyString(font()) &&
           VerifyField<int32_t>(verifier, VT_FONT_SIZE, 4) &&
           verifier.EndTable();
  }
};

struct TextComponentBuilder {
  typedef TextComponent Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(TextComponent::VT_TEXT, text);
  }
  void add_font(::flatbuffers::Offset<::flatbuffers::String> font) {
    fbb_.AddOffset(TextComponent::VT_FONT, font);
  }
  void add_font_size(int32_t font_size) {
    fbb_.AddElement<int32_t>(TextComponent::VT_FONT_SIZE, font_size, 0);
  }
  explicit TextComponentBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TextComponent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TextComponent>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TextComponent> CreateTextComponent(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0,
    ::flatbuffers::Offset<::flatbuffers::String> font = 0,
    int32_t font_size = 0) {
  TextComponentBuilder builder_(_fbb);
  builder_.add_font_size(font_size);
  builder_.add_font(font);
  builder_.add_text(text);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TextComponent> CreateTextComponentDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr,
    const char *font = nullptr,
    int32_t font_size = 0) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  auto font__ = font ? _fbb.CreateString(font) : 0;
  return SteamRot::rawData::CreateTextComponent(
      _fbb,
      text__,
      font__,
      font_size);
}

struct Entity FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_META = 4,
    VT_TRANSFORM = 6,
    VT_TEXT_DISPLAY = 8
  };
  const SteamRot::rawData::MetaComponent *meta() const {
    return GetPointer<const SteamRot::rawData::MetaComponent *>(VT_META);
  }
  const SteamRot::rawData::TransformComponent *transform() const {
    return GetPointer<const SteamRot::rawData::TransformComponent *>(VT_TRANSFORM);
  }
  const SteamRot::rawData::TextComponent *text_display() const {
    return GetPointer<const SteamRot::rawData::TextComponent *>(VT_TEXT_DISPLAY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_META) &&
           verifier.VerifyTable(meta()) &&
           VerifyOffset(verifier, VT_TRANSFORM) &&
           verifier.VerifyTable(transform()) &&
           VerifyOffset(verifier, VT_TEXT_DISPLAY) &&
           verifier.VerifyTable(text_display()) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_meta(::flatbuffers::Offset<SteamRot::rawData::MetaComponent> meta) {
    fbb_.AddOffset(Entity::VT_META, meta);
  }
  void add_transform(::flatbuffers::Offset<SteamRot::rawData::TransformComponent> transform) {
    fbb_.AddOffset(Entity::VT_TRANSFORM, transform);
  }
  void add_text_display(::flatbuffers::Offset<SteamRot::rawData::TextComponent> text_display) {
    fbb_.AddOffset(Entity::VT_TEXT_DISPLAY, text_display);
  }
  explicit EntityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Entity> CreateEntity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<SteamRot::rawData::MetaComponent> meta = 0,
    ::flatbuffers::Offset<SteamRot::rawData::TransformComponent> transform = 0,
    ::flatbuffers::Offset<SteamRot::rawData::TextComponent> text_display = 0) {
  EntityBuilder builder_(_fbb);
  builder_.add_text_display(text_display);
  builder_.add_transform(transform);
  builder_.add_meta(meta);
  return builder_.Finish();
}

struct EntityList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITIES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<SteamRot::rawData::Entity>> *entities() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<SteamRot::rawData::Entity>> *>(VT_ENTITIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyVector(entities()) &&
           verifier.VerifyVectorOfTables(entities()) &&
           verifier.EndTable();
  }
};

struct EntityListBuilder {
  typedef EntityList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_entities(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SteamRot::rawData::Entity>>> entities) {
    fbb_.AddOffset(EntityList::VT_ENTITIES, entities);
  }
  explicit EntityListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EntityList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EntityList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EntityList> CreateEntityList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SteamRot::rawData::Entity>>> entities = 0) {
  EntityListBuilder builder_(_fbb);
  builder_.add_entities(entities);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EntityList> CreateEntityListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<SteamRot::rawData::Entity>> *entities = nullptr) {
  auto entities__ = entities ? _fbb.CreateVector<::flatbuffers::Offset<SteamRot::rawData::Entity>>(*entities) : 0;
  return SteamRot::rawData::CreateEntityList(
      _fbb,
      entities__);
}

inline const SteamRot::rawData::EntityList *GetEntityList(const void *buf) {
  return ::flatbuffers::GetRoot<SteamRot::rawData::EntityList>(buf);
}

inline const SteamRot::rawData::EntityList *GetSizePrefixedEntityList(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SteamRot::rawData::EntityList>(buf);
}

inline bool VerifyEntityListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SteamRot::rawData::EntityList>(nullptr);
}

inline bool VerifySizePrefixedEntityListBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SteamRot::rawData::EntityList>(nullptr);
}

inline void FinishEntityListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SteamRot::rawData::EntityList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEntityListBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SteamRot::rawData::EntityList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace rawData
}  // namespace SteamRot

#endif  // FLATBUFFERS_GENERATED_ENTITIES_STEAMROT_RAWDATA_H_

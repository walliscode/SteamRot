/////////////////////////////////////////////////
/// @file
/// @brief Declaration of TestContext object
/////////////////////////////////////////////////

/////////////////////////////////////////////////
/// Preprocessor Directives
/////////////////////////////////////////////////
#pragma once

#include "EventHandler.h"
#include "GameContext.h"
#include "PathProvider.h"
#include <SFML/Graphics/RenderWindow.hpp>
namespace steamrot::tests {
/////////////////////////////////////////////////
/// @class TestContext
/// @brief Contains instances of objects used for context in tests
///
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/// @class TestContext
/// @brief 19H
///
/////////////////////////////////////////////////
class TestContext {

private:
  /////////////////////////////////////////////////
  /// @brief Instance of the SFML RenderWindow used for tests
  /////////////////////////////////////////////////
  sf::RenderWindow render_window;

  /////////////////////////////////////////////////
  /// @brief Instance of the EventHandler used for tests
  /////////////////////////////////////////////////
  steamrot::EventHandler event_handler;

  /////////////////////////////////////////////////
  /// @brief Instance of the AssetManager used for tests
  /////////////////////////////////////////////////
  steamrot::AssetManager asset_manager;

  /////////////////////////////////////////////////
  /// @brief mouse position intialized to (0, 0)
  /////////////////////////////////////////////////
  const sf::Vector2i mouse_position{0, 0};

  /////////////////////////////////////////////////
  /// @brief loop number initialized to 0
  /////////////////////////////////////////////////
  const size_t loop_number{0};

  /////////////////////////////////////////////////
  /// @brief environment type for the test context
  /////////////////////////////////////////////////
  const EnvironmentType env_type{EnvironmentType::Test};

  GameContext game_context;

public:
  TestContext();

  const steamrot::GameContext &GetGameContext() const;
};
} // namespace steamrot::tests

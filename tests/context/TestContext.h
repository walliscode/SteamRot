/////////////////////////////////////////////////
/// @file
/// @brief Declaration of TestContext object
/////////////////////////////////////////////////

/////////////////////////////////////////////////
/// Preprocessor Directives
/////////////////////////////////////////////////
#pragma once

#include "ArchetypeManager.h"
#include "EventHandler.h"
#include "GameContext.h"
#include "LogicContext.h"
#include "PathProvider.h"
#include "containers.h"
#include <SFML/Graphics/RenderTexture.hpp>
#include <SFML/Graphics/RenderWindow.hpp>
#include <memory>
namespace steamrot::tests {
/////////////////////////////////////////////////
/// @class TestContext
/// @brief Contains instances of objects used for context in tests
///
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/// @class TestContext
/// @brief 19H
///
/////////////////////////////////////////////////
class TestContext {

private:
  /////////////////////////////////////////////////
  /// @brief Instance of the SFML RenderWindow used for tests
  /////////////////////////////////////////////////
  sf::RenderWindow render_window;

  /////////////////////////////////////////////////
  /// @brief Instance of the EventHandler used for tests
  /////////////////////////////////////////////////
  steamrot::EventHandler event_handler;

  /////////////////////////////////////////////////
  /// @brief Instance of the AssetManager used for tests
  /////////////////////////////////////////////////
  steamrot::AssetManager asset_manager;

  /////////////////////////////////////////////////
  /// @brief loop number initialized to 0
  /////////////////////////////////////////////////
  const size_t loop_number{0};

  /////////////////////////////////////////////////
  /// @brief environment type for the test context
  /////////////////////////////////////////////////
  const EnvironmentType env_type{EnvironmentType::Test};

  /////////////////////////////////////////////////
  /// @brief Test EntityMemoryPool instance
  /////////////////////////////////////////////////
  EntityMemoryPool scene_entities;

  /////////////////////////////////////////////////
  /// @brief ArchetypeManager instance for tests
  /////////////////////////////////////////////////
  ArchetypeManager archetype_manager;

  /////////////////////////////////////////////////
  /// @brief Test RenderTexture instance
  /////////////////////////////////////////////////
  sf::RenderTexture render_texture;

  /////////////////////////////////////////////////
  /// @brief Mock GameContext instance for tests
  /////////////////////////////////////////////////
  std::unique_ptr<GameContext> game_context_ptr{nullptr};

  /////////////////////////////////////////////////
  /// @brief Mock LogicContext instance for tests with a test scene
  /////////////////////////////////////////////////
  std::unique_ptr<LogicContext> logic_context_for_test_scene{nullptr};

  /////////////////////////////////////////////////
  /// @brief Mock LogicContext instance for tests with a title scene
  /////////////////////////////////////////////////
  std::unique_ptr<LogicContext> logic_context_for_title_scene{nullptr};

  /////////////////////////////////////////////////
  /// @brief Mock LogicContext instance for tests with a crafting scene
  /////////////////////////////////////////////////
  std::unique_ptr<LogicContext> logic_context_for_crafting_scene{nullptr};

  /////////////////////////////////////////////////
  /// @brief Configure the GameContext instance
  /////////////////////////////////////////////////
  void ConfigureGameContext();

  /////////////////////////////////////////////////
  /// @brief Configure the Logic Context for the Test Scene
  /////////////////////////////////////////////////
  void ConfigureLogicContextForTestScene();

  /////////////////////////////////////////////////
  /// @brief Configure the Logic Context for the Title Scene
  /////////////////////////////////////////////////
  void ConfigureLogicContextForTitleScene();

  /////////////////////////////////////////////////
  /// @brief Configure the Logic Context for the Crafting Scene
  /////////////////////////////////////////////////
  void ConfigureLogicContextForCraftingScene();

public:
  TestContext(const SceneType scene_type = SceneType::SceneType_TEST);

  const steamrot::GameContext &GetGameContext() const;

  const steamrot::LogicContext &GetLogicContextForTestScene() const;

  const steamrot::LogicContext &GetLogicContextForTitleScene() const;

  const steamrot::LogicContext &GetLogicContextForCraftingScene() const;
};
} // namespace steamrot::tests

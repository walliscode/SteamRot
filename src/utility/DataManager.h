
////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include "themes_generated.h"
#include <filesystem>
#include <nlohmann/json.hpp>
using json = nlohmann::json;

namespace steamrot {
class DataManager {

private:
  ////////////////////////////////////////////////////////////
  /// \brief check file exists, if not throw error
  ///
  ////////////////////////////////////////////////////////////
  void CheckFileExists(const std::filesystem::path &file_path);

  ////////////////////////////////////////////////////////////
  /// \brief load binary data from file and return as vector of chars
  ////////////////////////////////////////////////////////////
  char *LoadBinaryData(const std::filesystem::path &file_path);

  ////////////////////////////////////////////////////////////
  /// \brief load JSON data from file and return json object
  ///
  ////////////////////////////////////////////////////////////
  json LoadJsonData(const std::filesystem::path &file_path);

public:
  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ///
  ////////////////////////////////////////////////////////////
  DataManager() = default;

  ////////////////////////////////////////////////////////////
  /// \brief load any relevent data from file storage
  ///
  ////////////////////////////////////////////////////////////
  void LoadData();

  ////////////////////////////////////////////////////////////
  /// \brief Load scene data from json
  ///
  ////////////////////////////////////////////////////////////
  json LoadSceneDataFromJson(std::string scene_identifier);

  ////////////////////////////////////////////////////////////
  /// \brief Load theme data for UI engine as json
  ////////////////////////////////////////////////////////////
  json LoadThemeData(const std::string &theme_name);

  ////////////////////////////////////////////////////////////
  /// \brief provide theme data as flatbuffers data
  ////////////////////////////////////////////////////////////
  const themes::UIObjects *ProvideThemeData(const std::string &theme_name);
};

} // namespace steamrot

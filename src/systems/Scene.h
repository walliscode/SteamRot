////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "ActionManager.h"
#include "EntityManager.h"

#include <SFML/Graphics/Drawable.hpp>
#include <nlohmann/json.hpp>
#include <string>

typedef std::vector<std::shared_ptr<sf::Drawable>> SceneDrawables;

class Scene {
protected:
  ////////////////////////////////////////////////////////////
  // Member: Entity Manager instance
  ////////////////////////////////////////////////////////////
  EntityManager m_entity_manager;
  ////////////////////////////////////////////////////////////
  // Member: Action Manager instance
  ////////////////////////////////////////////////////////////
  ActionManager m_action_manager;

  ////////////////////////////////////////////////////////////
  // Member: id generator shared across all scenes
  ////////////////////////////////////////////////////////////
  static size_t id_counter;

  ////////////////////////////////////////////////////////////
  // Member: unique id generated for each Scene instance
  ////////////////////////////////////////////////////////////
  size_t m_id;
  bool m_paused = false;
  bool m_active = true;
  std::string m_name;
  bool m_interactable = false;
  size_t m_current_frame = 0;

  ////////////////////////////////////////////////////////////
  /// \brief Default constructor (only accessible to derived classes)
  ///
  ////////////////////////////////////////////////////////////
  Scene(const std::string &name, const size_t &pool_size);

  ////////////////////////////////////////////////////////////
  /// \brief friend function for outputting the Scene to JSON
  ///
  ////////////////////////////////////////////////////////////
  friend void to_json(nlohmann::json &j, const Scene &scene);

public:
  ////////////////////////////////////////////////////////////
  /// \brief function container for all movement related logic
  ///
  ////////////////////////////////////////////////////////////
  virtual void sMovement() = 0;

  ////////////////////////////////////////////////////////////
  /// \brief exports all drawables to be rendered elsewhere
  ///
  ////////////////////////////////////////////////////////////
  virtual SceneDrawables sProvideDrawables() = 0;

  ////////////////////////////////////////////////////////////
  /// \brief Inidcicates if the Scenes is active or not
  ///
  ////////////////////////////////////////////////////////////
  bool GetActive() const;

  ////////////////////////////////////////////////////////////
  /// \brief change the active state of the Scene
  ///
  ////////////////////////////////////////////////////////////
  void SetActive(bool active);

  ////////////////////////////////////////////////////////////
  /// \brief return Scene id
  ////////////////////////////////////////////////////////////
  const size_t GetSceneID();
};

////////////////////////////////////////////////////////////
/// \brief to_json function for the Scene class (functionality from
/// nlohmann::json)
///
////////////////////////////////////////////////////////////
void to_json(nlohmann::json &j, const Scene &scene);

////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "ActionManager.h"
#include "EntityManager.h"
#include <SFML/Graphics/Drawable.hpp>
#include <SFML/Graphics/RenderTexture.hpp>
#include <memory>
#include <nlohmann/json.hpp>

#include <uuid.h>
typedef std::vector<std::shared_ptr<sf::Drawable>> SceneDrawables;

namespace steamrot {

class Scene {
  friend class SceneFactory;

protected:
  ////////////////////////////////////////////////////////////
  // Member: Entity Manager instance
  ////////////////////////////////////////////////////////////
  EntityManager m_entity_manager;
  ////////////////////////////////////////////////////////////
  // Member: Action Manager instance
  ////////////////////////////////////////////////////////////
  ActionManager m_action_manager;

  ////////////////////////////////////////////////////////////
  // Member: id generator shared across all scenes
  ////////////////////////////////////////////////////////////
  static size_t id_counter;

  ////////////////////////////////////////////////////////////
  // Member: unique id generated for each Scene instance
  ////////////////////////////////////////////////////////////
  uuids::uuid m_id;

  bool m_paused = false;
  bool m_active = true;

  bool m_interactable = false;
  size_t m_current_frame = 0;

  ////////////////////////////////////////////////////////////
  /// \brief default constructor (only accessible to derived classes)
  ////////////////////////////////////////////////////////////
  Scene(const size_t &pool_size, const json &config_data,
        const uuids::uuid &id);

  ////////////////////////////////////////////////////////////
  /// \brief friend function for outputting the Scene to JSON
  ///
  ////////////////////////////////////////////////////////////
  friend void to_json(nlohmann::json &j, const Scene &scene);

public:
  virtual ~Scene() = default;
  ////////////////////////////////////////////////////////////
  /// \brief function container for all movement related logic
  ///
  ////////////////////////////////////////////////////////////
  virtual void sMovement() = 0;

  ////////////////////////////////////////////////////////////
  /// \brief exports a ptr to a RenderTexture, this just needs to be drawn to
  /// the window
  ///
  ////////////////////////////////////////////////////////////
  virtual std::unique_ptr<sf::RenderTexture> sDrawToTexture() = 0;

  ////////////////////////////////////////////////////////////
  /// \brief Inidcicates if the Scenes is active or not
  ///
  ////////////////////////////////////////////////////////////
  bool GetActive() const;

  ////////////////////////////////////////////////////////////
  /// \brief change the active state of the Scene
  ///
  ////////////////////////////////////////////////////////////
  void SetActive(bool active);

  ////////////////////////////////////////////////////////////
  /// \brief return Scene id
  ////////////////////////////////////////////////////////////
  const uuids::uuid GetSceneID();
};

////////////////////////////////////////////////////////////
/// \brief to_json function for the Scene class (functionality from
/// nlohmann::json)
///
////////////////////////////////////////////////////////////
void to_json(nlohmann::json &j, const Scene &scene);

} // namespace steamrot

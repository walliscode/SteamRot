////////////////////////////////////////////////////////////
// preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include "AssetManager.h"
#include "Scene.h"
#include "SceneFactory.h"
#include "TexturesPackage.h"
#include <SFML/Graphics.hpp>
#include <SFML/Window/Event.hpp>
#include <map>
#include <nlohmann/json.hpp>

using json = nlohmann::json;

typedef std::map<std::string, std::shared_ptr<Scene>> SceneList;

namespace steamrot {
class SceneManager {
private:
  ////////////////////////////////////////////////////////////
  // Member data
  ////////////////////////////////////////////////////////////
  SceneFactory m_scene_factory;

  SceneList m_all_scenes;
  SceneList m_active_scenes;
  SceneList m_inactive_scenes;
  SceneList m_interactive_scenes;
  AssetManager m_asset_manager;

  // to_json needs access to private members
  friend void to_json(json &j, const SceneManager &scene_manager);

public:
  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ///
  ////////////////////////////////////////////////////////////

  SceneManager();
  ////////////////////////////////////////////////////////////
  /// \brief start up the SceneManager for the game
  ///
  ////////////////////////////////////////////////////////////
  void StartUp();

  ////////////////////////////////////////////////////////////
  /// \brief Update all Scenes
  ///
  ////////////////////////////////////////////////////////////
  void UpdateScenes();

  ////////////////////////////////////////////////////////////
  /// \brief Add a new scene
  ///
  ////////////////////////////////////////////////////////////
  void AddScene(std::string tag, std::string scene_type, size_t pool_size);

  ////////////////////////////////////////////////////////////
  /// \brief Remove a Scene
  ///
  ////////////////////////////////////////////////////////////
  void RemoveScene(std::string tag);

  ////////////////////////////////////////////////////////////
  /// \brief Activate a Scene for continued calculations
  ///
  ////////////////////////////////////////////////////////////
  void ActivateScene(std::string tag);

  ////////////////////////////////////////////////////////////
  /// \brief Deactivate a Scene to stop calculations
  ///
  ////////////////////////////////////////////////////////////
  void DeactivateScene(std::string tag);

  ////////////////////////////////////////////////////////////
  /// \brief Allow Scene to respond to user input
  ///
  ////////////////////////////////////////////////////////////
  void MakeInteractive();

  ////////////////////////////////////////////////////////////
  /// \brief Stop Scene from responding to user input
  ///
  ////////////////////////////////////////////////////////////
  void MakeNonInteractive();

  ////////////////////////////////////////////////////////////
  /// \brief collate textures from relevant scenes and provide as package
  ////////////////////////////////////////////////////////////
  TexturesPackage ProvideTexturesPackage();
};

////////////////////////////////////////////////////////////
/// \brief to_json functionality provided by nlohmann/json
///
////////////////////////////////////////////////////////////
void to_json(json &j, const SceneManager &scene_manager);

} // namespace steamrot

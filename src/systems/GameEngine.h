/////////////////////////////////////////////////
/// @file
/// @brief GameEngine class declaration.
/////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "AssetManager.h"

#include "DisplayManager.h"
#include "EventHandler.h"
#include "EventPacket.h"
#include "SceneManager.h"
#include <SFML/Graphics.hpp>
#include <memory>
#include <nlohmann/json.hpp>
#include <unordered_set>

namespace steamrot {
/////////////////////////////////////////////////
/// @class GameEngine
/// @brief Methods for managing the game loop, user input and object
/// communication.

/////////////////////////////////////////////////
class GameEngine {
private:
  /////////////////////////////////////////////////
  /// @brief DisplayManager object for all rendering and view management.
  /////////////////////////////////////////////////
  DisplayManager m_display_manager;

  /////////////////////////////////////////////////
  /// @brief SceneManager object for managing scenes and scene contaienrs.
  /////////////////////////////////////////////////
  std::unique_ptr<SceneManager> m_scene_manager;

  /////////////////////////////////////////////////
  /// @brief EventHandler object to handle user input and events.
  /////////////////////////////////////////////////
  EventHandler m_event_handler;

  /////////////////////////////////////////////////
  /// @brief AssetManager object to manage game assets such as fonts and
  /// textures.
  /////////////////////////////////////////////////
  AssetManager m_asset_manager;
  /////////////////////////////////////////////////
  /// @brief Variable to keep track of the current loop number.
  ///
  /// Increments by 1 at the start of each loop, the game will be maxed out at
  /// 60FPS so on a 32 bit system this will last 2.27 years. and on a 64 bit
  /// system this will last 9.75 trillion years.
  /////////////////////////////////////////////////
  size_t m_loop_number = 0;

  /////////////////////////////////////////////////
  /// @brief Member: RenderWindow for the game engine
  /////////////////////////////////////////////////
  sf::RenderWindow m_window;

  /////////////////////////////////////////////////
  /// @brief Lookup table for game engine events
  /////////////////////////////////////////////////
  std::unordered_set<EventType> m_game_engine_events;

  /////////////////////////////////////////////////
  /// @brief Get EventBus from EventHandler and check to see if there are any
  /// relevant events
  /////////////////////////////////////////////////
  void RetrieveEvents();

  /////////////////////////////////////////////////
  /// @brief Process events specific to the game engine
  /////////////////////////////////////////////////
  void ProcessGameEngineEvents(const EventPacket &event, EventBus &holding_bus);

  ////////////////////////////////////////////////////////////
  /// \brief Update all Systems
  ///
  ////////////////////////////////////////////////////////////
  void UpdateSystems();

  ////////////////////////////////////////////////////////////
  /// \brief Render Game Drwables
  ///
  ////////////////////////////////////////////////////////////
  void PassRenderPackage();

  /////////////////////////////////////////////////
  /// @brief Start up the game engine and load any resources
  /////////////////////////////////////////////////
  void StartUp();

  /////////////////////////////////////////////////
  /// @brief Run the game loop until exit condition is met
  /////////////////////////////////////////////////
  void RunGameLoop();

  ////////////////////////////////////////////////////////////
  /// \brief Shutdown the game engine
  ///
  ////////////////////////////////////////////////////////////
  void ShutDown();

  /////////////////////////////////////////////////
  /// @brief Container function, calling on SceneManager and DisplayManager for
  /// Title Scene loading
  /////////////////////////////////////////////////
  void ShowTitleScene();

  /////////////////////////////////////////////////
  /// @brief Container function, calling on SceneManager and DisplayManager for
  /// Crafting Scene loading
  ///
  /// This approach will eventually be replaced as we develop the display
  /// manager, but for now this allows us to quickly test the crafting scene.
  /////////////////////////////////////////////////
  void ShowCraftingScene();

  sf::Vector2i m_mouse_position;

  void UpdateLocalMousePosition();

public:
  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ///
  ////////////////////////////////////////////////////////////
  GameEngine(const EnvironmentType env_type = EnvironmentType::Production);

  ////////////////////////////////////////////////////////////
  /// \brief Start up and Run the game engine
  ///
  ////////////////////////////////////////////////////////////
  void RunGame(size_t numLoops = 0, bool use_test_window = false);

  ////////////////////////////////////////////////////////////
  /// \brief Get the current loop number
  ///
  ////////////////////////////////////////////////////////////
  size_t getLoopNumber();

  ////////////////////////////////////////////////////////////
  /// \brief Run the simulation (the while loop for a given number)
  ///
  ////////////////////////////////////////////////////////////
  void RunSimulation(int loops);

  /////////////////////////////////////////////////
  /// @brief Getter function for the GameEngine's RenderWindow
  /////////////////////////////////////////////////
  sf::RenderWindow &GetWindow();
};

} // namespace steamrot

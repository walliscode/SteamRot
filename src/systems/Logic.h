#pragma once

#include "ComponentFlags.h"
#include "EntityMemoryPool.h"
#include "TypeDefs.h"
#include <memory>

class Logic {
public:
  ////////////////////////////////////////////////////////////
  /// \brief default constructor
  ///
  ////////////////////////////////////////////////////////////
  Logic(size_t update_frequency);

  ////////////////////////////////////////////////////////////
  /// \brief guard function for update frequency
  ///
  ////////////////////////////////////////////////////////////
  void RunLogic(std::unique_ptr<EntityMemoryPool> &entities,
                const EntityIndicies &entity_indicies);

  ////////////////////////////////////////////////////////////
  /// \brief returns the Archetype for the derived logic class
  ///
  ////////////////////////////////////////////////////////////
  virtual const steamrot::ComponentFlags &GetArchetype() const = 0;

private:
  ////////////////////////////////////////////////////////////
  /// \brief Members
  ///
  ////////////////////////////////////////////////////////////
  size_t m_update_frequency; // how often to update the logic
  size_t m_cycle_count{0};   // how many cycles have passed

  ////////////////////////////////////////////////////////////
  /// \brief Carries out Logic for the game
  ///
  ////////////////////////////////////////////////////////////
  virtual void ProcessLogic(std::unique_ptr<EntityMemoryPool> &entities,
                            const EntityIndicies &entity_indicies) = 0;
};

////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "DataManager.h"
#include "Scene.h"
#include "SceneMenu.h"
#include <memory>

namespace steamrot {

class SceneFactory {
private:
  ////////////////////////////////////////////////////////////
  /// \brief pointer to data manager in Game Engine
  ///
  ////////////////////////////////////////////////////////////
  std::shared_ptr<DataManager> m_data_manager;

  ////////////////////////////////////////////////////////////
  /// \brief Create a new Menu Scene
  ///
  ////////////////////////////////////////////////////////////
  std::shared_ptr<SceneMenu> CreateMenuScene(std::string name);

public:
  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ///
  ////////////////////////////////////////////////////////////
  SceneFactory(std::shared_ptr<DataManager> data_manager);
  ;
  ////////////////////////////////////////////////////////////
  /// \brief gathers all scene creation methods
  ///
  ////////////////////////////////////////////////////////////
  std::shared_ptr<Scene> CreateScene(std::string name, std::string scene_type);
};
} // namespace steamrot

////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include "MenuScene.h"
#include "Scene.h"
#include "uuid.h"
#include <memory>

namespace steamrot {

class SceneFactory {
private:
  ////////////////////////////////////////////////////////////
  /// \brief Create a new Menu Scene
  ///
  ////////////////////////////////////////////////////////////
  std::shared_ptr<MenuScene> CreateMenuScene(std::string name);

  ////////////////////////////////////////////////////////////
  /// \brief create a uuid if none is in provided json data
  ///
  ////////////////////////////////////////////////////////////
  const uuids::uuid CreateUUID(json scene_data);

public:
  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ///
  ////////////////////////////////////////////////////////////
  SceneFactory();
  ;
  ////////////////////////////////////////////////////////////
  /// \brief gathers all scene creation methods
  ///
  ////////////////////////////////////////////////////////////
  std::shared_ptr<Scene> CreateScene(std::string scene_type, json scene_data);
};
} // namespace steamrot

////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////

#include <SFML/Graphics/RenderWindow.hpp>
#include <SFML/Window/Event.hpp>
#include <SFML/Window/Keyboard.hpp>
#include <SFML/Window/Mouse.hpp>
#include <bitset>
#include <unordered_map>

using UserEvents = std::unordered_map<
    std::string, std::bitset<sf::Keyboard::KeyCount + sf::Mouse::ButtonCount>>;
namespace steamrot {

class EventHandler {

private:
  ////////////////////////////////////////////////////////////
  // |brief process keyboard events: pressed and released
  ////////////////////////////////////////////////////////////
  void HandleKeyboardEvents(const sf::Event &event, UserEvents &events);

  ////////////////////////////////////////////////////////////
  // |brief process mouse events: pressed and released
  ////////////////////////////////////////////////////////////
  void HandleMouseEvents(const sf::Event &event, UserEvents &events);

public:
  ////////////////////////////////////////////////////////////
  // |brief default constructor
  ////////////////////////////////////////////////////////////
  EventHandler() = default;

  ////////////////////////////////////////////////////////////
  // |brief process events from the window
  ////////////////////////////////////////////////////////////
  UserEvents HandleEvents(sf::RenderWindow &window);

  ////////////////////////////////////////////////////////////
  // |member: bool queried by GameEngine about whether to close the window or
  // not
  ////////////////////////////////////////////////////////////
  bool m_close_window{false};
};
} // namespace steamrot


////////////////////////////////////////////////////////////
// preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include "Component.h"
#include "UIElement.h"
#include <SFML/System/Vector2.hpp>

namespace steamrot {

struct CUserInterface : public Component {

  ////////////////////////////////////////////////////////////
  // |brief: Default constructor
  ////////////////////////////////////////////////////////////
  CUserInterface() = default;

  /////////////////////////////////////////////////
  /// @brief String tag for the user interface component
  ///
  /// UI components should be few enough that manual unique naming is viable.
  /////////////////////////////////////////////////
  std::string UIName{"Default UI"};

  /////////////////////////////////////////////////
  /// @brief Root UI element of the user interface component
  /////////////////////////////////////////////////
  UIElement m_root_element;

  /////////////////////////////////////////////////
  /// @brief Is the this element of the user interface visible to Users.
  /////////////////////////////////////////////////
  bool m_UI_visible{false};

  /////////////////////////////////////////////////
  /// @brief returns the index of the component in the component register
  ///
  /// @return Index of the component in the component register
  /////////////////////////////////////////////////
  size_t GetComponentRegisterIndex() const override;
};
} // namespace steamrot

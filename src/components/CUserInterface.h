
////////////////////////////////////////////////////////////
// preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include "Component.h"
#include <cstddef>

#include <vector>

namespace steamrot {
enum class ContainerType : size_t { None = 0, DropDownMenu };

struct CUserInterface : public Component {

  ////////////////////////////////////////////////////////////
  // |brief: Default constructor
  ////////////////////////////////////////////////////////////
  CUserInterface() = default;

  ////////////////////////////////////////////////////////////
  // \brief Variable to store parent index (Entity ID)
  ////////////////////////////////////////////////////////////
  std::optional<size_t> m_parent_index;

  ////////////////////////////////////////////////////////////
  // \brief Variable to store children indices
  ////////////////////////////////////////////////////////////
  std::vector<size_t> m_child_indicies;

  ////////////////////////////////////////////////////////////
  // \brief: Default constructor
  ////////////////////////////////////////////////////////////

  const std::string &Name() override;
  void Configure(const json &data) override;
};
} // namespace steamrot

////////////////////////////////////////////////////////////
/// @file
/// @brief Declaration of the CUIState class.
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include "Component.h"
#include <string>
#include <unordered_map>
#include <vector>

namespace steamrot {

////////////////////////////////////////////////////////////
/// @brief Component for managing UI visibility based on scene state
///
/// This component maps state keys to CUserInterface component indices
/// and manages their visibility based on the scene state.
////////////////////////////////////////////////////////////
struct CUIState : public Component {

  ////////////////////////////////////////////////////////////
  /// @brief Default constructor
  ////////////////////////////////////////////////////////////
  CUIState() = default;

  ////////////////////////////////////////////////////////////
  /// @brief Mapping of state keys to vectors of UI component indices
  ///
  /// Each state key maps to a vector of entity indices that have
  /// CUserInterface components. When a state key is true, the
  /// corresponding UI components should be visible.
  ////////////////////////////////////////////////////////////
  std::unordered_map<std::string, std::vector<size_t>> m_state_to_ui_indices;

  ////////////////////////////////////////////////////////////
  /// @brief Get the position of the Component in the Component Register.
  ///
  /// @return index of the component in the component register
  ////////////////////////////////////////////////////////////
  size_t GetComponentRegisterIndex() const override;
};

} // namespace steamrot

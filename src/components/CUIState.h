////////////////////////////////////////////////////////////
/// @file
/// @brief Declaration of the CUIState class.
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include "Component.h"
#include <string>
#include <unordered_map>
#include <vector>

namespace steamrot {

////////////////////////////////////////////////////////////
/// @brief Holds UI visibility state for a particular state key
///
/// Specifies which UI components should be visible (on) and
/// which should be hidden (off) for a given state.
////////////////////////////////////////////////////////////
struct UIVisibilityState {
  ////////////////////////////////////////////////////////////
  /// @brief Entity indices of UI components that should be visible
  ////////////////////////////////////////////////////////////
  std::vector<size_t> m_ui_indices_on;

  ////////////////////////////////////////////////////////////
  /// @brief Entity indices of UI components that should be hidden
  ////////////////////////////////////////////////////////////
  std::vector<size_t> m_ui_indices_off;
};

////////////////////////////////////////////////////////////
/// @brief Component for managing UI visibility based on scene state
///
/// This component maps state keys to UI visibility states,
/// specifying which UI components should be on and which should be off.
////////////////////////////////////////////////////////////
struct CUIState : public Component {

  ////////////////////////////////////////////////////////////
  /// @brief Default constructor
  ////////////////////////////////////////////////////////////
  CUIState() = default;

  ////////////////////////////////////////////////////////////
  /// @brief Mapping of state keys to UI visibility states
  ///
  /// Each state key maps to a UIVisibilityState that specifies
  /// which UI components should be visible (on) and which should
  /// be hidden (off).
  ////////////////////////////////////////////////////////////
  std::unordered_map<std::string, UIVisibilityState> m_state_to_ui_visibility;

  ////////////////////////////////////////////////////////////
  /// @brief Get the position of the Component in the Component Register.
  ///
  /// @return index of the component in the component register
  ////////////////////////////////////////////////////////////
  size_t GetComponentRegisterIndex() const override;
};

} // namespace steamrot

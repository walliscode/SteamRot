////////////////////////////////////////////////////////////
// preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include "CMeta.h"
#include "CShape.h"
#include <magic_enum/magic_enum.hpp>

namespace steamrot {
namespace components {

namespace containers {

////////////////////////////////////////////////////////////
// |brief: ComponentRegister is a tuple of all the components for the game
//  "One source of truth"
////////////////////////////////////////////////////////////
typedef std::tuple<CMeta, CShape> ComponentRegister;

////////////////////////////////////////////////////////////
// |brief: size of the component register
////////////////////////////////////////////////////////////
constexpr size_t kComponentRegisterSize =
    std::tuple_size<ComponentRegister>::value;

////////////////////////////////////////////////////////////
// |brief: template function to produce a tuple of vectors of components
////////////////////////////////////////////////////////////
template <typename... Components>
using ComponentVectorTuple =

    std::tuple<std::vector<Components>...>;

////////////////////////////////////////////////////////////
// |brief: typedef for EntityMemoryPool
////////////////////////////////////////////////////////////
using ComponentCollection = ComponentVectorTuple<ComponentRegister>;

}; // namespace containers
}; // namespace components
}; // namespace steamrot

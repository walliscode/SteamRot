////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include "Tile.h"
#include <memory>

namespace steamrot {

class Session {
public:
  ////////////////////////////////////////////////////////////
  // |brief default constructor
  ////////////////////////////////////////////////////////////
  Session();

  ////////////////////////////////////////////////////////////
  // |brief add new tile to the session
  ////////////////////////////////////////////////////////////
  void AddTile();

  ////////////////////////////////////////////////////////////
  // |brief remove active tile from the session
  ////////////////////////////////////////////////////////////
  void RemoveTile(std::shared_ptr<Tile> tile);

  ////////////////////////////////////////////////////////////
  // |brief Get all tiles in the session
  ////////////////////////////////////////////////////////////
  std::vector<std::shared_ptr<Tile>> &GetTiles();

  ////////////////////////////////////////////////////////////
  // |brief Get the active tile
  ////////////////////////////////////////////////////////////
  std::shared_ptr<Tile> GetActiveTile();

  ////////////////////////////////////////////////////////////
  // |brief Set the active tile
  ////////////////////////////////////////////////////////////
  void SetActiveTile(std::shared_ptr<Tile> tile);

private:
  ////////////////////////////////////////////////////////////
  // data members
  ////////////////////////////////////////////////////////////
  std::vector<std::shared_ptr<Tile>> m_tiles;
  std::shared_ptr<Tile> m_active_tile;
};
} // namespace steamrot

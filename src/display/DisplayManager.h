////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include "ActionManager.h"
#include "DataManager.h"
#include "Session.h"
#include "TexturesPackage.h"
#include "UIEngine.h"
#include "global_constants.h"
#include <SFML/Graphics.hpp>

#include <SFML/Graphics/RenderTexture.hpp>
#include <memory>
#include <nlohmann/json.hpp>

////////////////////////////////////////////////////////////
// namespaces/using
////////////////////////////////////////////////////////////
using json = nlohmann::json;

namespace steamrot {
class DisplayManager {
private:
  ////////////////////////////////////////////////////////////
  // members
  ////////////////////////////////////////////////////////////
  sf::RenderWindow m_window{sf::VideoMode(steamrot::kWindowSize),
                            "SFML window"};
  sf::Color m_background_color;
  std::array<std::shared_ptr<Session>, 5> m_sessions;
  std::shared_ptr<Session> m_active_session;
  json m_tile_config;
  sf::RenderTexture m_tile_overlay;
  /**
   * @brief Member: RenderTexture for UI layer
   */
  sf::RenderTexture m_ui_layer;
  ////////////////////////////////////////////////////////////
  // Member: DataManager for loading and saving data
  ////////////////////////////////////////////////////////////
  DataManager m_data_manager;

  ////////////////////////////////////////////////////////////
  // Member: UIengine (for handling UI elements for tiles)
  ////////////////////////////////////////////////////////////
  UIEngine m_ui_engine;

public:
  ////////////////////////////////////////////////////////////
  // |brief default constructor
  ////////////////////////////////////////////////////////////
  DisplayManager();

  ////////////////////////////////////////////////////////////
  // |brief set window configuration from json object
  ////////////////////////////////////////////////////////////
  void SetWindowConfig(const json &config);

  ////////////////////////////////////////////////////////////
  // |brief get render window object
  ////////////////////////////////////////////////////////////
  sf::RenderWindow &GetWindow();

  ////////////////////////////////////////////////////////////
  // |brief render/draw all textures to the window
  ////////////////////////////////////////////////////////////
  void Render(TexturesPackage &textures_package);

  ////////////////////////////////////////////////////////////
  // |brief update all display logic
  ////////////////////////////////////////////////////////////
  void Update();
};
} // namespace steamrot

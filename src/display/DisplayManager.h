////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include "ActionManager.h"
#include "Session.h"
#include "global_constants.h"
#include <SFML/Graphics.hpp>

#include <memory>
#include <nlohmann/json.hpp>

using json = nlohmann::json;
class DisplayManager {
private:
  ////////////////////////////////////////////////////////////
  // members
  ////////////////////////////////////////////////////////////
  sf::RenderWindow m_window{sf::VideoMode(steamrot::kWindowSize),
                            "SFML window"};
  sf::Color m_background_color;
  std::array<std::shared_ptr<Session>, 5> m_sessions;
  std::shared_ptr<Session> m_active_session;
  json m_tile_config;
  ActionManager m_action{"display_manager"};
  std::vector<std::shared_ptr<Action>> m_action_waiting_room;

public:
  ////////////////////////////////////////////////////////////
  // |brief default constructor
  ////////////////////////////////////////////////////////////
  DisplayManager();

  ////////////////////////////////////////////////////////////
  // |brief set window configuration from json object
  ////////////////////////////////////////////////////////////
  void SetWindowConfig(const json &config);

  ////////////////////////////////////////////////////////////
  // |brief get the RenderWindow object
  ////////////////////////////////////////////////////////////
  sf::RenderWindow &GetWindow();

  ////////////////////////////////////////////////////////////
  // |brief return a pointer to the session currently being used
  ////////////////////////////////////////////////////////////
  std::shared_ptr<Session> GetActiveSession();

  ////////////////////////////////////////////////////////////
  // |brief get a json object describing the tile configuration
  ////////////////////////////////////////////////////////////
  const json &GetTileConfig();

  ////////////////////////////////////////////////////////////
  // |brief update all display logic
  ////////////////////////////////////////////////////////////
  void Update();

  ////////////////////////////////////////////////////////////
  // |brief create actions from event flags
  ////////////////////////////////////////////////////////////
  void PopulateActions(const EventFlags &event_flags);

  ////////////////////////////////////////////////////////////
  // |brief take in drawables and draw them to the window
  ////////////////////////////////////////////////////////////
  void DrawProvidedDrawables(
      std::map<std::string, std::vector<std::shared_ptr<sf::Drawable>>>
          &drawables);

  ////////////////////////////////////////////////////////////
  // |brief draw the tile borders over top of game textures
  ////////////////////////////////////////////////////////////
  sf::RenderTexture &DrawTileOverlay();

  ////////////////////////////////////////////////////////////
  // |brief draw everything
  ////////////////////////////////////////////////////////////
  void Cycle(std::map<std::string, std::vector<std::shared_ptr<sf::Drawable>>>
                 &drawables);
};

/////////////////////////////////////////////////
/// @file
/// @brief Declaration of DisplayManager class
/////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////

#include "FailInfo.h"
#include "SceneInfoProvider.h"
#include "Session.h"
#include <SFML/Graphics.hpp>
#include <expected>
#include <memory>

namespace steamrot {

/////////////////////////////////////////////////
/// @class DisplayManager
/// @brief Responsible for rendering texture and managing display sessions
///
/////////////////////////////////////////////////
class DisplayManager {
private:
  /////////////////////////////////////////////////
  /// @brief Reference to the RenderWindow for the Game
  /////////////////////////////////////////////////
  sf::RenderWindow &m_window;

  /////////////////////////////////////////////////
  /// @brief Reference to the SceneInfoProvider for scene data
  /////////////////////////////////////////////////
  const SceneInfoProvider &m_scene_manager_interface;

  /////////////////////////////////////////////////
  /// @brief Potential Sessions to choose from
  ///
  /// Each Session represents a differnet display configuration, should not
  /// affect gameplay itself
  /////////////////////////////////////////////////
  std::array<std::shared_ptr<Session>, 5> m_sessions;

  /////////////////////////////////////////////////
  /// @brief Active session pointer, only one session can be active at a time
  /////////////////////////////////////////////////
  std::shared_ptr<Session> m_active_session;

public:
  /////////////////////////////////////////////////
  /// @brief Constructor taking a reference to a RenderWindow
  ///
  /// @param window RenderWindow reference
  /////////////////////////////////////////////////
  DisplayManager(sf::RenderWindow &window,
                 const SceneInfoProvider &scene_manager_interface);

  /////////////////////////////////////////////////
  /// @brief Calls clear, draw, and display on the RenderWindow
  /////////////////////////////////////////////////
  std::expected<std::monostate, FailInfo> CallRenderCycle();
};
} // namespace steamrot

/////////////////////////////////////////////////
/// @file
/// @brief Declaration of DisplayManager class
/////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////

#include "Session.h"
#include "TexturesPackage.h"
#include <SFML/Graphics.hpp>
#include <SFML/Graphics/RenderTexture.hpp>
#include <memory>
#include <nlohmann/json.hpp>

namespace steamrot {

/////////////////////////////////////////////////
/// @class DisplayManager
/// @brief Responsible for rendering texture and managing display sessions
///
/////////////////////////////////////////////////
class DisplayManager {
private:
  /////////////////////////////////////////////////
  /// @brief Reference to the RenderWindow for the Game
  /////////////////////////////////////////////////
  sf::RenderWindow &m_window;

  /////////////////////////////////////////////////
  /// @brief Potential Sessions to choose from
  ///
  /// Each Session represents a differnet display configuration, should not
  /// affect gameplay itself
  /////////////////////////////////////////////////
  std::array<std::shared_ptr<Session>, 5> m_sessions;

  /////////////////////////////////////////////////
  /// @brief Active session pointer, only one session can be active at a time
  /////////////////////////////////////////////////
  std::shared_ptr<Session> m_active_session;

public:
  /////////////////////////////////////////////////
  /// @brief Constructor taking a reference to a RenderWindow
  ///
  /// @param window RenderWindow reference
  /////////////////////////////////////////////////
  DisplayManager(sf::RenderWindow &window);

  ////////////////////////////////////////////////////////////
  // |brief render/draw all textures to the window
  ////////////////////////////////////////////////////////////
  void Render(TexturesPackage &textures_package);

  /////////////////////////////////////////////////
  /// @brief Clears all tiles from the active session and display the title
  /// scene
  ///
  /// @param title_scene_id UUID of the title scene to load
  /////////////////////////////////////////////////
  void LoadTitleSceneTiles(const uuids::uuid &title_scene_id);

  /////////////////////////////////////////////////
  /// @brief Clears all tiles from the active session and display the crafting
  /// scene
  ///
  /// @param crafting_scene_id UUID of the crafting scene to load
  /////////////////////////////////////////////////
  void LoadCraftingSceneTiles(const uuids::uuid &crafting_scene_id);
};
} // namespace steamrot

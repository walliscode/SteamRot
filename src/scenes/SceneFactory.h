/////////////////////////////////////////////////
/// @file
/// @brief Declaration of the SceneFactory class.
/////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "GameContext.h"
#include "Scene.h"
#include "uuid.h"
#include <SFML/Graphics/RenderWindow.hpp>
#include <memory>

namespace steamrot {

/////////////////////////////////////////////////
/// @class SceneFactory
/// @brief Generates scenes objects ready for use in the game engine.
///
/////////////////////////////////////////////////
class SceneFactory {
private:
  /////////////////////////////////////////////////
  /// @brief GameContext object provided at construction, used to generate
  /// Scenes.
  /////////////////////////////////////////////////
  const GameContext m_game_context;

  ////////////////////////////////////////////////////////////
  /// \brief create a uuid if none is in provided json data
  ///
  ////////////////////////////////////////////////////////////
  const uuids::uuid CreateUUID();

public:
  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ///
  ////////////////////////////////////////////////////////////
  SceneFactory(const GameContext game_context);

  ////////////////////////////////////////////////////////////
  /// \brief gathers all scene creation methods
  ///
  ////////////////////////////////////////////////////////////
  std::unique_ptr<Scene> CreateDefaultScene(const SceneType &scene_type);
};
} // namespace steamrot

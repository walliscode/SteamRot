#pragma once
/////////////////////////////////////////////////
/// @file
/// @brief Declaration of the UIElement struct
/////////////////////////////////////////////////

/////////////////////////////////////////////////
/// Preprocessor Directives
/////////////////////////////////////////////////
#include "UIStyle.h"
#pragma once

/////////////////////////////////////////////////
/// Headers
/////////////////////////////////////////////////
#include "user_interface_generated.h"
#include <SFML/Graphics.hpp>
#include <memory>
#include <vector>

namespace steamrot {

/////////////////////////////////////////////////
/// @class UIElement
/// @brief Base struct for all UI elements, contains common properties
/////////////////////////////////////////////////
struct UIElement {

  /////////////////////////////////////////////////
  /// @brief Position of the UI element in the window
  /////////////////////////////////////////////////
  sf::Vector2f position{0.f, 0.f};

  /////////////////////////////////////////////////
  /// @brief Size of the UI element.
  /////////////////////////////////////////////////
  sf::Vector2f size{0.f, 0.f};

  /////////////////////////////////////////////////
  /// @brief Is mouse over this element, false if it over a child element
  /////////////////////////////////////////////////
  bool mouse_over{false};

  /////////////////////////////////////////////////
  /// @brief Helper variable for the UIRenderLogic and UICollisionLogic whether
  /// to recursively process the childred
  /////////////////////////////////////////////////
  bool children_active{false};

  /////////////////////////////////////////////////
  /// @brief Container for all child elements. Can be empty
  /////////////////////////////////////////////////
  std::vector<std::unique_ptr<UIElement>> child_elements;

  /////////////////////////////////////////////////
  /// @brief Spacing and sizing strategy for the children elements defaulting to
  /// Even
  /////////////////////////////////////////////////
  SpacingAndSizingType spacing_strategy{
      SpacingAndSizingType::SpacingAndSizingType_Even};

  /////////////////////////////////////////////////
  /// @brief Layout type of the children elements
  /////////////////////////////////////////////////
  LayoutType layout{LayoutType::LayoutType_Vertical};

  virtual void DrawUIElement(sf::RenderTexture &texture,
                             const UIStyle &style) const = 0;

  virtual ~UIElement() = default;
};
} // namespace steamrot

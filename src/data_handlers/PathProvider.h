/////////////////////////////////////////////////
/// @file
/// @brief Declaration of PathProvider class
/////////////////////////////////////////////////

/////////////////////////////////////////////////
/// Preprocessor Directives
/////////////////////////////////////////////////
#pragma once

#include <filesystem>
namespace steamrot {

enum class EnvironmentType {
  None = 0,
  Test,
  Production,
};
/////////////////////////////////////////////////
/// @class PathProvider
/// @brief Provide paths for data files
///
/////////////////////////////////////////////////
class PathProvider {

private:
  /////////////////////////////////////////////////
  /// @brief Environment type to determine the base path
  /////////////////////////////////////////////////
  static EnvironmentType m_environment;

public:
  /////////////////////////////////////////////////
  /// @brief Constructor for PathProvider taking an environment type
  ///
  /// @param env_type Environment type enum to determine the base path
  /////////////////////////////////////////////////
  PathProvider(EnvironmentType env_type = EnvironmentType::None);

  /////////////////////////////////////////////////
  /// @brief Gets the current environment type
  ///
  /// @return EnvironmentType
  /////////////////////////////////////////////////
  const EnvironmentType GetEnvironment() const;

  /////////////////////////////////////////////////
  /// @brief Provides top level data directory path
  /////////////////////////////////////////////////
  const std::filesystem::path GetDataDirectory() const;

  /////////////////////////////////////////////////
  /// @brief Provides the path to the fragments directory
  /////////////////////////////////////////////////
  const std::filesystem::path GetFragmentDirectory() const;
};
} // namespace steamrot

////////////////////////////////////////////////////////////
// preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include <SFML/Graphics/RenderTexture.hpp>

#include <map>

#include <uuid.h>
namespace steamrot {

class TexturesPackage {
private:
  ////////////////////////////////////////////////////////////
  // map of scene id to texture
  ////////////////////////////////////////////////////////////
  std::map<uuids::uuid, std::unique_ptr<sf::RenderTexture>> m_texture_map;

public:
  ////////////////////////////////////////////////////////////
  // |brief default constructor
  ////////////////////////////////////////////////////////////
  TexturesPackage() = default;

  ////////////////////////////////////////////////////////////
  // |brief get textures
  ////////////////////////////////////////////////////////////
  const std::map<uuids::uuid, std::unique_ptr<sf::RenderTexture>> &
  GetTextures();

  ////////////////////////////////////////////////////////////
  // |brief add texture
  ////////////////////////////////////////////////////////////
  void AddTexture(const uuids::uuid &scene_id,
                  std::unique_ptr<sf::RenderTexture>);
};

} // namespace steamrot

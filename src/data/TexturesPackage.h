////////////////////////////////////////////////////////////
// preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include <SFML/Graphics/RenderTexture.hpp>

#include <functional>
#include <map>

#include <uuid.h>
namespace steamrot {

class TexturesPackage {
private:
  /**
   * @brief Passes the RenderTexture of each scene, mapped by ID. No ownership
   * wanted, just carrying data so reference_wrapper is used.
   */
  std::map<uuids::uuid, std::reference_wrapper<sf::RenderTexture>>
      m_texture_map;

public:
  ////////////////////////////////////////////////////////////
  // |brief default constructor
  ////////////////////////////////////////////////////////////
  TexturesPackage() = default;

  ////////////////////////////////////////////////////////////
  // |brief get textures
  ////////////////////////////////////////////////////////////
  const std::map<uuids::uuid, std::reference_wrapper<sf::RenderTexture>> &
  GetTextures();

  ////////////////////////////////////////////////////////////
  // |brief add texture
  ////////////////////////////////////////////////////////////
  void AddTexture(const uuids::uuid &scene_id, sf::RenderTexture &texture);
};
} // namespace steamrot

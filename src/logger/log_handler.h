////////////////////////////////////////////////////////////
// preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// headers
////////////////////////////////////////////////////////////
#include "spdlog/common.h"

////////////////////////////////////////////////////////////
// namespace
////////////////////////////////////////////////////////////
namespace steamrot {
namespace log_handler {

////////////////////////////////////////////////////////////
// member variables/data
////////////////////////////////////////////////////////////
enum class LogCode : int {

  kNoCode = 0,
};

////////////////////////////////////////////////////////////
// |brief handle incoming messages and create logs
////////////////////////////////////////////////////////////
void ProcessLog(const spdlog::level::level_enum &log_level,
                const steamrot::log_handler::LogCode &log_code,
                const std::string &message);

////////////////////////////////////////////////////////////
// |brief process info level logs
////////////////////////////////////////////////////////////
void ProcessInfoLog(const steamrot::log_handler::LogCode &log_code,
                    const std::string &message);

////////////////////////////////////////////////////////////
// |brief process error level logs
////////////////////////////////////////////////////////////
void ProcessErrorLog(const steamrot::log_handler::LogCode &log_code,
                     const std::string &message);
} // namespace log_handler
} // namespace steamrot

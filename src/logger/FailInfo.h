/////////////////////////////////////////////////
/// @file
/// @brief decleration of FailInfo struct
/////////////////////////////////////////////////

/////////////////////////////////////////////////
/// Preprocessor Directives
/////////////////////////////////////////////////
#pragma once

/////////////////////////////////////////////////
/// Headers
/////////////////////////////////////////////////
#include <string>
namespace steamrot {

enum class FailMode {
  None = 0,
  NotImplemented,
  FileNotFound,
  EnvironmentNotSet,
  FlatbuffersDataNotFound,
  ParameterOutOfBounds,
  IndexOutOfBounds,
  NonExistentEnumValue,
  SceneTypeNotFound,
  NotAddedToMap,
  EnumValueNotHandled,
  VariantTypeMismatch,
  NullPointer,
  InvalidUUID
};

struct FailInfo {
  /////////////////////////////////////////////////
  /// @brief Member variable capturing the fail mode as an enum
  /////////////////////////////////////////////////
  FailMode mode;

  /////////////////////////////////////////////////
  /// @brief Message describing the failure
  /////////////////////////////////////////////////
  std::string message;

  /////////////////////////////////////////////////
  /// @brief Default constructor for FailInfo
  ///
  /// @param mode Enum representing the fail mode
  /// @param msg Message describing the failure
  /////////////////////////////////////////////////
  FailInfo(FailMode mode, const std::string &msg) : mode(mode), message(msg) {}

  /////////////////////////////////////////////////
  /// @brief Delete
  /////////////////////////////////////////////////
  FailInfo() = delete;
};
} // namespace steamrot

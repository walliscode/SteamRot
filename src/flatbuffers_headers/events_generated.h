// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EVENTS_STEAMROT_H_
#define FLATBUFFERS_GENERATED_EVENTS_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace steamrot {

enum EventType : uint64_t {
  EventType_EVENT_NONE = 1ULL,
  EventType_EVENT_USER_INPUT = 2ULL,
  EventType_EVENT_CHANGE_SCENE = 4ULL,
  EventType_EVENT_QUIT_GAME = 8ULL,
  EventType_EVENT_TOGGLE_DROPDOWN = 16ULL,
  EventType_NONE = 0,
  EventType_ANY = 31ULL
};

inline const EventType (&EnumValuesEventType())[5] {
  static const EventType values[] = {
    EventType_EVENT_NONE,
    EventType_EVENT_USER_INPUT,
    EventType_EVENT_CHANGE_SCENE,
    EventType_EVENT_QUIT_GAME,
    EventType_EVENT_TOGGLE_DROPDOWN
  };
  return values;
}

inline const char * const *EnumNamesEventType() {
  static const char * const names[17] = {
    "EVENT_NONE",
    "EVENT_USER_INPUT",
    "",
    "EVENT_CHANGE_SCENE",
    "",
    "",
    "",
    "EVENT_QUIT_GAME",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "EVENT_TOGGLE_DROPDOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventType(EventType e) {
  if (::flatbuffers::IsOutRange(e, EventType_EVENT_NONE, EventType_EVENT_TOGGLE_DROPDOWN)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(EventType_EVENT_NONE);
  return EnumNamesEventType()[index];
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_EVENTS_STEAMROT_H_

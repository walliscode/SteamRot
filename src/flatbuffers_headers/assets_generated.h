// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ASSETS_STEAMROT_H_
#define FLATBUFFERS_GENERATED_ASSETS_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace steamrot {

struct FontData;
struct FontDataBuilder;

struct AssetCollection;
struct AssetCollectionBuilder;

struct FontData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FontDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct FontDataBuilder {
  typedef FontData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(FontData::VT_NAME, name);
  }
  explicit FontDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FontData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FontData>(end);
    fbb_.Required(o, FontData::VT_NAME);
    return o;
  }
};

inline ::flatbuffers::Offset<FontData> CreateFontData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  FontDataBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FontData> CreateFontDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return steamrot::CreateFontData(
      _fbb,
      name__);
}

struct AssetCollection FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AssetCollectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FONTS = 4,
    VT_UI_STYLES = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::FontData>> *fonts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::FontData>> *>(VT_FONTS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ui_styles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_UI_STYLES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FONTS) &&
           verifier.VerifyVector(fonts()) &&
           verifier.VerifyVectorOfTables(fonts()) &&
           VerifyOffset(verifier, VT_UI_STYLES) &&
           verifier.VerifyVector(ui_styles()) &&
           verifier.VerifyVectorOfStrings(ui_styles()) &&
           verifier.EndTable();
  }
};

struct AssetCollectionBuilder {
  typedef AssetCollection Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_fonts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::FontData>>> fonts) {
    fbb_.AddOffset(AssetCollection::VT_FONTS, fonts);
  }
  void add_ui_styles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ui_styles) {
    fbb_.AddOffset(AssetCollection::VT_UI_STYLES, ui_styles);
  }
  explicit AssetCollectionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AssetCollection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AssetCollection>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AssetCollection> CreateAssetCollection(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::FontData>>> fonts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ui_styles = 0) {
  AssetCollectionBuilder builder_(_fbb);
  builder_.add_ui_styles(ui_styles);
  builder_.add_fonts(fonts);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AssetCollection> CreateAssetCollectionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<steamrot::FontData>> *fonts = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ui_styles = nullptr) {
  auto fonts__ = fonts ? _fbb.CreateVector<::flatbuffers::Offset<steamrot::FontData>>(*fonts) : 0;
  auto ui_styles__ = ui_styles ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ui_styles) : 0;
  return steamrot::CreateAssetCollection(
      _fbb,
      fonts__,
      ui_styles__);
}

inline const steamrot::AssetCollection *GetAssetCollection(const void *buf) {
  return ::flatbuffers::GetRoot<steamrot::AssetCollection>(buf);
}

inline const steamrot::AssetCollection *GetSizePrefixedAssetCollection(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<steamrot::AssetCollection>(buf);
}

inline bool VerifyAssetCollectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<steamrot::AssetCollection>(nullptr);
}

inline bool VerifySizePrefixedAssetCollectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<steamrot::AssetCollection>(nullptr);
}

inline void FinishAssetCollectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::AssetCollection> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAssetCollectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::AssetCollection> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_ASSETS_STEAMROT_H_

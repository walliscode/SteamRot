// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UISTYLE_STEAMROT_H_
#define FLATBUFFERS_GENERATED_UISTYLE_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "types_generated.h"

namespace steamrot {

struct StyleData;
struct StyleDataBuilder;

struct PanelStyleData;
struct PanelStyleDataBuilder;

struct ButtonStyleData;
struct ButtonStyleDataBuilder;

struct DropDownContainerStyleData;
struct DropDownContainerStyleDataBuilder;

struct DropDownListStyleData;
struct DropDownListStyleDataBuilder;

struct DropDownItemStyleData;
struct DropDownItemStyleDataBuilder;

struct DropDownButtonStyleData;
struct DropDownButtonStyleDataBuilder;

struct UIStyleData;
struct UIStyleDataBuilder;

struct StyleData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StyleDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BACKGROUND_COLOR = 4,
    VT_BORDER_COLOR = 6,
    VT_BORDER_THICKNESS = 8,
    VT_RADIUS_RESOLUTION = 10,
    VT_INNER_MARGIN = 12,
    VT_MINIMUM_SIZE = 14,
    VT_MAXIMUM_SIZE = 16
  };
  const Color *background_color() const {
    return GetStruct<const Color *>(VT_BACKGROUND_COLOR);
  }
  const Color *border_color() const {
    return GetStruct<const Color *>(VT_BORDER_COLOR);
  }
  float border_thickness() const {
    return GetField<float>(VT_BORDER_THICKNESS, 0.0f);
  }
  int32_t radius_resolution() const {
    return GetField<int32_t>(VT_RADIUS_RESOLUTION, 0);
  }
  const Vector2f *inner_margin() const {
    return GetPointer<const Vector2f *>(VT_INNER_MARGIN);
  }
  const Vector2f *minimum_size() const {
    return GetPointer<const Vector2f *>(VT_MINIMUM_SIZE);
  }
  const Vector2f *maximum_size() const {
    return GetPointer<const Vector2f *>(VT_MAXIMUM_SIZE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<Color>(verifier, VT_BACKGROUND_COLOR, 1) &&
           VerifyFieldRequired<Color>(verifier, VT_BORDER_COLOR, 1) &&
           VerifyField<float>(verifier, VT_BORDER_THICKNESS, 4) &&
           VerifyField<int32_t>(verifier, VT_RADIUS_RESOLUTION, 4) &&
           VerifyOffsetRequired(verifier, VT_INNER_MARGIN) &&
           verifier.VerifyTable(inner_margin()) &&
           VerifyOffsetRequired(verifier, VT_MINIMUM_SIZE) &&
           verifier.VerifyTable(minimum_size()) &&
           VerifyOffsetRequired(verifier, VT_MAXIMUM_SIZE) &&
           verifier.VerifyTable(maximum_size()) &&
           verifier.EndTable();
  }
};

struct StyleDataBuilder {
  typedef StyleData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_background_color(const Color *background_color) {
    fbb_.AddStruct(StyleData::VT_BACKGROUND_COLOR, background_color);
  }
  void add_border_color(const Color *border_color) {
    fbb_.AddStruct(StyleData::VT_BORDER_COLOR, border_color);
  }
  void add_border_thickness(float border_thickness) {
    fbb_.AddElement<float>(StyleData::VT_BORDER_THICKNESS, border_thickness, 0.0f);
  }
  void add_radius_resolution(int32_t radius_resolution) {
    fbb_.AddElement<int32_t>(StyleData::VT_RADIUS_RESOLUTION, radius_resolution, 0);
  }
  void add_inner_margin(::flatbuffers::Offset<Vector2f> inner_margin) {
    fbb_.AddOffset(StyleData::VT_INNER_MARGIN, inner_margin);
  }
  void add_minimum_size(::flatbuffers::Offset<Vector2f> minimum_size) {
    fbb_.AddOffset(StyleData::VT_MINIMUM_SIZE, minimum_size);
  }
  void add_maximum_size(::flatbuffers::Offset<Vector2f> maximum_size) {
    fbb_.AddOffset(StyleData::VT_MAXIMUM_SIZE, maximum_size);
  }
  explicit StyleDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StyleData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StyleData>(end);
    fbb_.Required(o, StyleData::VT_BACKGROUND_COLOR);
    fbb_.Required(o, StyleData::VT_BORDER_COLOR);
    fbb_.Required(o, StyleData::VT_INNER_MARGIN);
    fbb_.Required(o, StyleData::VT_MINIMUM_SIZE);
    fbb_.Required(o, StyleData::VT_MAXIMUM_SIZE);
    return o;
  }
};

inline ::flatbuffers::Offset<StyleData> CreateStyleData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Color *background_color = nullptr,
    const Color *border_color = nullptr,
    float border_thickness = 0.0f,
    int32_t radius_resolution = 0,
    ::flatbuffers::Offset<Vector2f> inner_margin = 0,
    ::flatbuffers::Offset<Vector2f> minimum_size = 0,
    ::flatbuffers::Offset<Vector2f> maximum_size = 0) {
  StyleDataBuilder builder_(_fbb);
  builder_.add_maximum_size(maximum_size);
  builder_.add_minimum_size(minimum_size);
  builder_.add_inner_margin(inner_margin);
  builder_.add_radius_resolution(radius_resolution);
  builder_.add_border_thickness(border_thickness);
  builder_.add_border_color(border_color);
  builder_.add_background_color(background_color);
  return builder_.Finish();
}

struct PanelStyleData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PanelStyleDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STYLE = 4
  };
  const steamrot::StyleData *style() const {
    return GetPointer<const steamrot::StyleData *>(VT_STYLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_STYLE) &&
           verifier.VerifyTable(style()) &&
           verifier.EndTable();
  }
};

struct PanelStyleDataBuilder {
  typedef PanelStyleData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_style(::flatbuffers::Offset<steamrot::StyleData> style) {
    fbb_.AddOffset(PanelStyleData::VT_STYLE, style);
  }
  explicit PanelStyleDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PanelStyleData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PanelStyleData>(end);
    fbb_.Required(o, PanelStyleData::VT_STYLE);
    return o;
  }
};

inline ::flatbuffers::Offset<PanelStyleData> CreatePanelStyleData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::StyleData> style = 0) {
  PanelStyleDataBuilder builder_(_fbb);
  builder_.add_style(style);
  return builder_.Finish();
}

struct ButtonStyleData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ButtonStyleDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STYLE = 4,
    VT_TEXT_COLOR = 6,
    VT_HOVER_COLOR = 8,
    VT_FONT = 10,
    VT_FONT_SIZE = 12
  };
  const steamrot::StyleData *style() const {
    return GetPointer<const steamrot::StyleData *>(VT_STYLE);
  }
  const Color *text_color() const {
    return GetStruct<const Color *>(VT_TEXT_COLOR);
  }
  const Color *hover_color() const {
    return GetStruct<const Color *>(VT_HOVER_COLOR);
  }
  const ::flatbuffers::String *font() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FONT);
  }
  int32_t font_size() const {
    return GetField<int32_t>(VT_FONT_SIZE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_STYLE) &&
           verifier.VerifyTable(style()) &&
           VerifyFieldRequired<Color>(verifier, VT_TEXT_COLOR, 1) &&
           VerifyFieldRequired<Color>(verifier, VT_HOVER_COLOR, 1) &&
           VerifyOffsetRequired(verifier, VT_FONT) &&
           verifier.VerifyString(font()) &&
           VerifyField<int32_t>(verifier, VT_FONT_SIZE, 4) &&
           verifier.EndTable();
  }
};

struct ButtonStyleDataBuilder {
  typedef ButtonStyleData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_style(::flatbuffers::Offset<steamrot::StyleData> style) {
    fbb_.AddOffset(ButtonStyleData::VT_STYLE, style);
  }
  void add_text_color(const Color *text_color) {
    fbb_.AddStruct(ButtonStyleData::VT_TEXT_COLOR, text_color);
  }
  void add_hover_color(const Color *hover_color) {
    fbb_.AddStruct(ButtonStyleData::VT_HOVER_COLOR, hover_color);
  }
  void add_font(::flatbuffers::Offset<::flatbuffers::String> font) {
    fbb_.AddOffset(ButtonStyleData::VT_FONT, font);
  }
  void add_font_size(int32_t font_size) {
    fbb_.AddElement<int32_t>(ButtonStyleData::VT_FONT_SIZE, font_size, 0);
  }
  explicit ButtonStyleDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ButtonStyleData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ButtonStyleData>(end);
    fbb_.Required(o, ButtonStyleData::VT_STYLE);
    fbb_.Required(o, ButtonStyleData::VT_TEXT_COLOR);
    fbb_.Required(o, ButtonStyleData::VT_HOVER_COLOR);
    fbb_.Required(o, ButtonStyleData::VT_FONT);
    return o;
  }
};

inline ::flatbuffers::Offset<ButtonStyleData> CreateButtonStyleData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::StyleData> style = 0,
    const Color *text_color = nullptr,
    const Color *hover_color = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> font = 0,
    int32_t font_size = 0) {
  ButtonStyleDataBuilder builder_(_fbb);
  builder_.add_font_size(font_size);
  builder_.add_font(font);
  builder_.add_hover_color(hover_color);
  builder_.add_text_color(text_color);
  builder_.add_style(style);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ButtonStyleData> CreateButtonStyleDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::StyleData> style = 0,
    const Color *text_color = nullptr,
    const Color *hover_color = nullptr,
    const char *font = nullptr,
    int32_t font_size = 0) {
  auto font__ = font ? _fbb.CreateString(font) : 0;
  return steamrot::CreateButtonStyleData(
      _fbb,
      style,
      text_color,
      hover_color,
      font__,
      font_size);
}

struct DropDownContainerStyleData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DropDownContainerStyleDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STYLE = 4,
    VT_DROP_SYMBOL_RATIO = 6
  };
  const steamrot::StyleData *style() const {
    return GetPointer<const steamrot::StyleData *>(VT_STYLE);
  }
  float drop_symbol_ratio() const {
    return GetField<float>(VT_DROP_SYMBOL_RATIO, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_STYLE) &&
           verifier.VerifyTable(style()) &&
           VerifyField<float>(verifier, VT_DROP_SYMBOL_RATIO, 4) &&
           verifier.EndTable();
  }
};

struct DropDownContainerStyleDataBuilder {
  typedef DropDownContainerStyleData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_style(::flatbuffers::Offset<steamrot::StyleData> style) {
    fbb_.AddOffset(DropDownContainerStyleData::VT_STYLE, style);
  }
  void add_drop_symbol_ratio(float drop_symbol_ratio) {
    fbb_.AddElement<float>(DropDownContainerStyleData::VT_DROP_SYMBOL_RATIO, drop_symbol_ratio, 0.0f);
  }
  explicit DropDownContainerStyleDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DropDownContainerStyleData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DropDownContainerStyleData>(end);
    fbb_.Required(o, DropDownContainerStyleData::VT_STYLE);
    return o;
  }
};

inline ::flatbuffers::Offset<DropDownContainerStyleData> CreateDropDownContainerStyleData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::StyleData> style = 0,
    float drop_symbol_ratio = 0.0f) {
  DropDownContainerStyleDataBuilder builder_(_fbb);
  builder_.add_drop_symbol_ratio(drop_symbol_ratio);
  builder_.add_style(style);
  return builder_.Finish();
}

struct DropDownListStyleData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DropDownListStyleDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STYLE = 4,
    VT_TEXT_COLOR = 6,
    VT_HOVER_COLOR = 8,
    VT_FONT = 10,
    VT_FONT_SIZE = 12
  };
  const steamrot::StyleData *style() const {
    return GetPointer<const steamrot::StyleData *>(VT_STYLE);
  }
  const Color *text_color() const {
    return GetStruct<const Color *>(VT_TEXT_COLOR);
  }
  const Color *hover_color() const {
    return GetStruct<const Color *>(VT_HOVER_COLOR);
  }
  const ::flatbuffers::String *font() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FONT);
  }
  int32_t font_size() const {
    return GetField<int32_t>(VT_FONT_SIZE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_STYLE) &&
           verifier.VerifyTable(style()) &&
           VerifyFieldRequired<Color>(verifier, VT_TEXT_COLOR, 1) &&
           VerifyFieldRequired<Color>(verifier, VT_HOVER_COLOR, 1) &&
           VerifyOffsetRequired(verifier, VT_FONT) &&
           verifier.VerifyString(font()) &&
           VerifyField<int32_t>(verifier, VT_FONT_SIZE, 4) &&
           verifier.EndTable();
  }
};

struct DropDownListStyleDataBuilder {
  typedef DropDownListStyleData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_style(::flatbuffers::Offset<steamrot::StyleData> style) {
    fbb_.AddOffset(DropDownListStyleData::VT_STYLE, style);
  }
  void add_text_color(const Color *text_color) {
    fbb_.AddStruct(DropDownListStyleData::VT_TEXT_COLOR, text_color);
  }
  void add_hover_color(const Color *hover_color) {
    fbb_.AddStruct(DropDownListStyleData::VT_HOVER_COLOR, hover_color);
  }
  void add_font(::flatbuffers::Offset<::flatbuffers::String> font) {
    fbb_.AddOffset(DropDownListStyleData::VT_FONT, font);
  }
  void add_font_size(int32_t font_size) {
    fbb_.AddElement<int32_t>(DropDownListStyleData::VT_FONT_SIZE, font_size, 0);
  }
  explicit DropDownListStyleDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DropDownListStyleData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DropDownListStyleData>(end);
    fbb_.Required(o, DropDownListStyleData::VT_STYLE);
    fbb_.Required(o, DropDownListStyleData::VT_TEXT_COLOR);
    fbb_.Required(o, DropDownListStyleData::VT_HOVER_COLOR);
    fbb_.Required(o, DropDownListStyleData::VT_FONT);
    return o;
  }
};

inline ::flatbuffers::Offset<DropDownListStyleData> CreateDropDownListStyleData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::StyleData> style = 0,
    const Color *text_color = nullptr,
    const Color *hover_color = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> font = 0,
    int32_t font_size = 0) {
  DropDownListStyleDataBuilder builder_(_fbb);
  builder_.add_font_size(font_size);
  builder_.add_font(font);
  builder_.add_hover_color(hover_color);
  builder_.add_text_color(text_color);
  builder_.add_style(style);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DropDownListStyleData> CreateDropDownListStyleDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::StyleData> style = 0,
    const Color *text_color = nullptr,
    const Color *hover_color = nullptr,
    const char *font = nullptr,
    int32_t font_size = 0) {
  auto font__ = font ? _fbb.CreateString(font) : 0;
  return steamrot::CreateDropDownListStyleData(
      _fbb,
      style,
      text_color,
      hover_color,
      font__,
      font_size);
}

struct DropDownItemStyleData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DropDownItemStyleDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STYLE = 4,
    VT_TEXT_COLOR = 6,
    VT_HOVER_COLOR = 8,
    VT_FONT = 10,
    VT_FONT_SIZE = 12
  };
  const steamrot::StyleData *style() const {
    return GetPointer<const steamrot::StyleData *>(VT_STYLE);
  }
  const Color *text_color() const {
    return GetStruct<const Color *>(VT_TEXT_COLOR);
  }
  const Color *hover_color() const {
    return GetStruct<const Color *>(VT_HOVER_COLOR);
  }
  const ::flatbuffers::String *font() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FONT);
  }
  int32_t font_size() const {
    return GetField<int32_t>(VT_FONT_SIZE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_STYLE) &&
           verifier.VerifyTable(style()) &&
           VerifyFieldRequired<Color>(verifier, VT_TEXT_COLOR, 1) &&
           VerifyFieldRequired<Color>(verifier, VT_HOVER_COLOR, 1) &&
           VerifyOffsetRequired(verifier, VT_FONT) &&
           verifier.VerifyString(font()) &&
           VerifyField<int32_t>(verifier, VT_FONT_SIZE, 4) &&
           verifier.EndTable();
  }
};

struct DropDownItemStyleDataBuilder {
  typedef DropDownItemStyleData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_style(::flatbuffers::Offset<steamrot::StyleData> style) {
    fbb_.AddOffset(DropDownItemStyleData::VT_STYLE, style);
  }
  void add_text_color(const Color *text_color) {
    fbb_.AddStruct(DropDownItemStyleData::VT_TEXT_COLOR, text_color);
  }
  void add_hover_color(const Color *hover_color) {
    fbb_.AddStruct(DropDownItemStyleData::VT_HOVER_COLOR, hover_color);
  }
  void add_font(::flatbuffers::Offset<::flatbuffers::String> font) {
    fbb_.AddOffset(DropDownItemStyleData::VT_FONT, font);
  }
  void add_font_size(int32_t font_size) {
    fbb_.AddElement<int32_t>(DropDownItemStyleData::VT_FONT_SIZE, font_size, 0);
  }
  explicit DropDownItemStyleDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DropDownItemStyleData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DropDownItemStyleData>(end);
    fbb_.Required(o, DropDownItemStyleData::VT_STYLE);
    fbb_.Required(o, DropDownItemStyleData::VT_TEXT_COLOR);
    fbb_.Required(o, DropDownItemStyleData::VT_HOVER_COLOR);
    fbb_.Required(o, DropDownItemStyleData::VT_FONT);
    return o;
  }
};

inline ::flatbuffers::Offset<DropDownItemStyleData> CreateDropDownItemStyleData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::StyleData> style = 0,
    const Color *text_color = nullptr,
    const Color *hover_color = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> font = 0,
    int32_t font_size = 0) {
  DropDownItemStyleDataBuilder builder_(_fbb);
  builder_.add_font_size(font_size);
  builder_.add_font(font);
  builder_.add_hover_color(hover_color);
  builder_.add_text_color(text_color);
  builder_.add_style(style);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DropDownItemStyleData> CreateDropDownItemStyleDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::StyleData> style = 0,
    const Color *text_color = nullptr,
    const Color *hover_color = nullptr,
    const char *font = nullptr,
    int32_t font_size = 0) {
  auto font__ = font ? _fbb.CreateString(font) : 0;
  return steamrot::CreateDropDownItemStyleData(
      _fbb,
      style,
      text_color,
      hover_color,
      font__,
      font_size);
}

struct DropDownButtonStyleData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DropDownButtonStyleDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STYLE = 4,
    VT_TRIANGLE_COLOR = 6,
    VT_HOVER_COLOR = 8
  };
  const steamrot::StyleData *style() const {
    return GetPointer<const steamrot::StyleData *>(VT_STYLE);
  }
  const Color *triangle_color() const {
    return GetStruct<const Color *>(VT_TRIANGLE_COLOR);
  }
  const Color *hover_color() const {
    return GetStruct<const Color *>(VT_HOVER_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_STYLE) &&
           verifier.VerifyTable(style()) &&
           VerifyFieldRequired<Color>(verifier, VT_TRIANGLE_COLOR, 1) &&
           VerifyFieldRequired<Color>(verifier, VT_HOVER_COLOR, 1) &&
           verifier.EndTable();
  }
};

struct DropDownButtonStyleDataBuilder {
  typedef DropDownButtonStyleData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_style(::flatbuffers::Offset<steamrot::StyleData> style) {
    fbb_.AddOffset(DropDownButtonStyleData::VT_STYLE, style);
  }
  void add_triangle_color(const Color *triangle_color) {
    fbb_.AddStruct(DropDownButtonStyleData::VT_TRIANGLE_COLOR, triangle_color);
  }
  void add_hover_color(const Color *hover_color) {
    fbb_.AddStruct(DropDownButtonStyleData::VT_HOVER_COLOR, hover_color);
  }
  explicit DropDownButtonStyleDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DropDownButtonStyleData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DropDownButtonStyleData>(end);
    fbb_.Required(o, DropDownButtonStyleData::VT_STYLE);
    fbb_.Required(o, DropDownButtonStyleData::VT_TRIANGLE_COLOR);
    fbb_.Required(o, DropDownButtonStyleData::VT_HOVER_COLOR);
    return o;
  }
};

inline ::flatbuffers::Offset<DropDownButtonStyleData> CreateDropDownButtonStyleData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::StyleData> style = 0,
    const Color *triangle_color = nullptr,
    const Color *hover_color = nullptr) {
  DropDownButtonStyleDataBuilder builder_(_fbb);
  builder_.add_hover_color(hover_color);
  builder_.add_triangle_color(triangle_color);
  builder_.add_style(style);
  return builder_.Finish();
}

struct UIStyleData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UIStyleDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PANEL_STYLE = 4,
    VT_BUTTON_STYLE = 6,
    VT_DROP_DOWN_CONTAINER_STYLE = 8,
    VT_DROP_DOWN_LIST_STYLE = 10,
    VT_DROP_DOWN_ITEM_STYLE = 12,
    VT_DROP_DOWN_BUTTON_STYLE = 14,
    VT_NAME = 16
  };
  const steamrot::PanelStyleData *panel_style() const {
    return GetPointer<const steamrot::PanelStyleData *>(VT_PANEL_STYLE);
  }
  const steamrot::ButtonStyleData *button_style() const {
    return GetPointer<const steamrot::ButtonStyleData *>(VT_BUTTON_STYLE);
  }
  const steamrot::DropDownContainerStyleData *drop_down_container_style() const {
    return GetPointer<const steamrot::DropDownContainerStyleData *>(VT_DROP_DOWN_CONTAINER_STYLE);
  }
  const steamrot::DropDownListStyleData *drop_down_list_style() const {
    return GetPointer<const steamrot::DropDownListStyleData *>(VT_DROP_DOWN_LIST_STYLE);
  }
  const steamrot::DropDownItemStyleData *drop_down_item_style() const {
    return GetPointer<const steamrot::DropDownItemStyleData *>(VT_DROP_DOWN_ITEM_STYLE);
  }
  const steamrot::DropDownButtonStyleData *drop_down_button_style() const {
    return GetPointer<const steamrot::DropDownButtonStyleData *>(VT_DROP_DOWN_BUTTON_STYLE);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_PANEL_STYLE) &&
           verifier.VerifyTable(panel_style()) &&
           VerifyOffsetRequired(verifier, VT_BUTTON_STYLE) &&
           verifier.VerifyTable(button_style()) &&
           VerifyOffsetRequired(verifier, VT_DROP_DOWN_CONTAINER_STYLE) &&
           verifier.VerifyTable(drop_down_container_style()) &&
           VerifyOffsetRequired(verifier, VT_DROP_DOWN_LIST_STYLE) &&
           verifier.VerifyTable(drop_down_list_style()) &&
           VerifyOffsetRequired(verifier, VT_DROP_DOWN_ITEM_STYLE) &&
           verifier.VerifyTable(drop_down_item_style()) &&
           VerifyOffsetRequired(verifier, VT_DROP_DOWN_BUTTON_STYLE) &&
           verifier.VerifyTable(drop_down_button_style()) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct UIStyleDataBuilder {
  typedef UIStyleData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_panel_style(::flatbuffers::Offset<steamrot::PanelStyleData> panel_style) {
    fbb_.AddOffset(UIStyleData::VT_PANEL_STYLE, panel_style);
  }
  void add_button_style(::flatbuffers::Offset<steamrot::ButtonStyleData> button_style) {
    fbb_.AddOffset(UIStyleData::VT_BUTTON_STYLE, button_style);
  }
  void add_drop_down_container_style(::flatbuffers::Offset<steamrot::DropDownContainerStyleData> drop_down_container_style) {
    fbb_.AddOffset(UIStyleData::VT_DROP_DOWN_CONTAINER_STYLE, drop_down_container_style);
  }
  void add_drop_down_list_style(::flatbuffers::Offset<steamrot::DropDownListStyleData> drop_down_list_style) {
    fbb_.AddOffset(UIStyleData::VT_DROP_DOWN_LIST_STYLE, drop_down_list_style);
  }
  void add_drop_down_item_style(::flatbuffers::Offset<steamrot::DropDownItemStyleData> drop_down_item_style) {
    fbb_.AddOffset(UIStyleData::VT_DROP_DOWN_ITEM_STYLE, drop_down_item_style);
  }
  void add_drop_down_button_style(::flatbuffers::Offset<steamrot::DropDownButtonStyleData> drop_down_button_style) {
    fbb_.AddOffset(UIStyleData::VT_DROP_DOWN_BUTTON_STYLE, drop_down_button_style);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(UIStyleData::VT_NAME, name);
  }
  explicit UIStyleDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UIStyleData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UIStyleData>(end);
    fbb_.Required(o, UIStyleData::VT_PANEL_STYLE);
    fbb_.Required(o, UIStyleData::VT_BUTTON_STYLE);
    fbb_.Required(o, UIStyleData::VT_DROP_DOWN_CONTAINER_STYLE);
    fbb_.Required(o, UIStyleData::VT_DROP_DOWN_LIST_STYLE);
    fbb_.Required(o, UIStyleData::VT_DROP_DOWN_ITEM_STYLE);
    fbb_.Required(o, UIStyleData::VT_DROP_DOWN_BUTTON_STYLE);
    fbb_.Required(o, UIStyleData::VT_NAME);
    return o;
  }
};

inline ::flatbuffers::Offset<UIStyleData> CreateUIStyleData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::PanelStyleData> panel_style = 0,
    ::flatbuffers::Offset<steamrot::ButtonStyleData> button_style = 0,
    ::flatbuffers::Offset<steamrot::DropDownContainerStyleData> drop_down_container_style = 0,
    ::flatbuffers::Offset<steamrot::DropDownListStyleData> drop_down_list_style = 0,
    ::flatbuffers::Offset<steamrot::DropDownItemStyleData> drop_down_item_style = 0,
    ::flatbuffers::Offset<steamrot::DropDownButtonStyleData> drop_down_button_style = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  UIStyleDataBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_drop_down_button_style(drop_down_button_style);
  builder_.add_drop_down_item_style(drop_down_item_style);
  builder_.add_drop_down_list_style(drop_down_list_style);
  builder_.add_drop_down_container_style(drop_down_container_style);
  builder_.add_button_style(button_style);
  builder_.add_panel_style(panel_style);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UIStyleData> CreateUIStyleDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::PanelStyleData> panel_style = 0,
    ::flatbuffers::Offset<steamrot::ButtonStyleData> button_style = 0,
    ::flatbuffers::Offset<steamrot::DropDownContainerStyleData> drop_down_container_style = 0,
    ::flatbuffers::Offset<steamrot::DropDownListStyleData> drop_down_list_style = 0,
    ::flatbuffers::Offset<steamrot::DropDownItemStyleData> drop_down_item_style = 0,
    ::flatbuffers::Offset<steamrot::DropDownButtonStyleData> drop_down_button_style = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return steamrot::CreateUIStyleData(
      _fbb,
      panel_style,
      button_style,
      drop_down_container_style,
      drop_down_list_style,
      drop_down_item_style,
      drop_down_button_style,
      name__);
}

inline const steamrot::UIStyleData *GetUIStyleData(const void *buf) {
  return ::flatbuffers::GetRoot<steamrot::UIStyleData>(buf);
}

inline const steamrot::UIStyleData *GetSizePrefixedUIStyleData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<steamrot::UIStyleData>(buf);
}

inline bool VerifyUIStyleDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<steamrot::UIStyleData>(nullptr);
}

inline bool VerifySizePrefixedUIStyleDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<steamrot::UIStyleData>(nullptr);
}

inline void FinishUIStyleDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::UIStyleData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUIStyleDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::UIStyleData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_UISTYLE_STEAMROT_H_

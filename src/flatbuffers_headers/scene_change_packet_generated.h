// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENECHANGEPACKET_STEAMROT_H_
#define FLATBUFFERS_GENERATED_SCENECHANGEPACKET_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace steamrot {

struct SceneChangePacketData;
struct SceneChangePacketDataBuilder;

enum SceneType : int8_t {
  SceneType_UNKNOWN = 0,
  SceneType_TEST = 1,
  SceneType_TITLE = 2,
  SceneType_CRAFTING = 3,
  SceneType_MIN = SceneType_UNKNOWN,
  SceneType_MAX = SceneType_CRAFTING
};

inline const SceneType (&EnumValuesSceneType())[4] {
  static const SceneType values[] = {
    SceneType_UNKNOWN,
    SceneType_TEST,
    SceneType_TITLE,
    SceneType_CRAFTING
  };
  return values;
}

inline const char * const *EnumNamesSceneType() {
  static const char * const names[5] = {
    "UNKNOWN",
    "TEST",
    "TITLE",
    "CRAFTING",
    nullptr
  };
  return names;
}

inline const char *EnumNameSceneType(SceneType e) {
  if (::flatbuffers::IsOutRange(e, SceneType_UNKNOWN, SceneType_CRAFTING)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSceneType()[index];
}

struct SceneChangePacketData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SceneChangePacketDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_SCENE_TYPE = 6
  };
  const ::flatbuffers::String *uuid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UUID);
  }
  steamrot::SceneType scene_type() const {
    return static_cast<steamrot::SceneType>(GetField<int8_t>(VT_SCENE_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyField<int8_t>(verifier, VT_SCENE_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct SceneChangePacketDataBuilder {
  typedef SceneChangePacketData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uuid(::flatbuffers::Offset<::flatbuffers::String> uuid) {
    fbb_.AddOffset(SceneChangePacketData::VT_UUID, uuid);
  }
  void add_scene_type(steamrot::SceneType scene_type) {
    fbb_.AddElement<int8_t>(SceneChangePacketData::VT_SCENE_TYPE, static_cast<int8_t>(scene_type), 0);
  }
  explicit SceneChangePacketDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SceneChangePacketData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SceneChangePacketData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SceneChangePacketData> CreateSceneChangePacketData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> uuid = 0,
    steamrot::SceneType scene_type = steamrot::SceneType_UNKNOWN) {
  SceneChangePacketDataBuilder builder_(_fbb);
  builder_.add_uuid(uuid);
  builder_.add_scene_type(scene_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SceneChangePacketData> CreateSceneChangePacketDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    steamrot::SceneType scene_type = steamrot::SceneType_UNKNOWN) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  return steamrot::CreateSceneChangePacketData(
      _fbb,
      uuid__,
      scene_type);
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_SCENECHANGEPACKET_STEAMROT_H_

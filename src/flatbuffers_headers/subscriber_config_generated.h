// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SUBSCRIBERCONFIG_STEAMROT_H_
#define FLATBUFFERS_GENERATED_SUBSCRIBERCONFIG_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "events_generated.h"

namespace steamrot {

struct SubscriberData;
struct SubscriberDataBuilder;

struct SubscriberData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SubscriberDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENT_TYPE_DATA = 4,
    VT_EVENT_DATA_DATA_TYPE = 6,
    VT_EVENT_DATA_DATA = 8
  };
  steamrot::EventType event_type_data() const {
    return static_cast<steamrot::EventType>(GetField<uint64_t>(VT_EVENT_TYPE_DATA, 0));
  }
  steamrot::EventDataData event_data_data_type() const {
    return static_cast<steamrot::EventDataData>(GetField<uint8_t>(VT_EVENT_DATA_DATA_TYPE, 0));
  }
  const void *event_data_data() const {
    return GetPointer<const void *>(VT_EVENT_DATA_DATA);
  }
  template<typename T> const T *event_data_data_as() const;
  const steamrot::UserInputBitsetData *event_data_data_as_UserInputBitsetData() const {
    return event_data_data_type() == steamrot::EventDataData_UserInputBitsetData ? static_cast<const steamrot::UserInputBitsetData *>(event_data_data()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_EVENT_TYPE_DATA, 8) &&
           VerifyField<uint8_t>(verifier, VT_EVENT_DATA_DATA_TYPE, 1) &&
           VerifyOffset(verifier, VT_EVENT_DATA_DATA) &&
           VerifyEventDataData(verifier, event_data_data(), event_data_data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const steamrot::UserInputBitsetData *SubscriberData::event_data_data_as<steamrot::UserInputBitsetData>() const {
  return event_data_data_as_UserInputBitsetData();
}

struct SubscriberDataBuilder {
  typedef SubscriberData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_event_type_data(steamrot::EventType event_type_data) {
    fbb_.AddElement<uint64_t>(SubscriberData::VT_EVENT_TYPE_DATA, static_cast<uint64_t>(event_type_data), 0);
  }
  void add_event_data_data_type(steamrot::EventDataData event_data_data_type) {
    fbb_.AddElement<uint8_t>(SubscriberData::VT_EVENT_DATA_DATA_TYPE, static_cast<uint8_t>(event_data_data_type), 0);
  }
  void add_event_data_data(::flatbuffers::Offset<void> event_data_data) {
    fbb_.AddOffset(SubscriberData::VT_EVENT_DATA_DATA, event_data_data);
  }
  explicit SubscriberDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SubscriberData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SubscriberData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SubscriberData> CreateSubscriberData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::EventType event_type_data = static_cast<steamrot::EventType>(0),
    steamrot::EventDataData event_data_data_type = steamrot::EventDataData_NONE,
    ::flatbuffers::Offset<void> event_data_data = 0) {
  SubscriberDataBuilder builder_(_fbb);
  builder_.add_event_type_data(event_type_data);
  builder_.add_event_data_data(event_data_data);
  builder_.add_event_data_data_type(event_data_data_type);
  return builder_.Finish();
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_SUBSCRIBERCONFIG_STEAMROT_H_

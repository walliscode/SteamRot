// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USERINTERFACE_STEAMROT_H_
#define FLATBUFFERS_GENERATED_USERINTERFACE_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "actions_generated.h"
#include "types_generated.h"

namespace steamrot {

struct UIElementDataPackageData;
struct UIElementDataPackageDataBuilder;

struct PanelData;
struct PanelDataBuilder;

struct ButtonData;
struct ButtonDataBuilder;

struct DropDownData;
struct DropDownDataBuilder;

struct UIElementData;
struct UIElementDataBuilder;

struct UserInterface;
struct UserInterfaceBuilder;

enum UIElementType : int8_t {
  UIElementType_None = 0,
  UIElementType_Panel = 1,
  UIElementType_Button = 2,
  UIElementType_DropDown = 3,
  UIElementType_MIN = UIElementType_None,
  UIElementType_MAX = UIElementType_DropDown
};

inline const UIElementType (&EnumValuesUIElementType())[4] {
  static const UIElementType values[] = {
    UIElementType_None,
    UIElementType_Panel,
    UIElementType_Button,
    UIElementType_DropDown
  };
  return values;
}

inline const char * const *EnumNamesUIElementType() {
  static const char * const names[5] = {
    "None",
    "Panel",
    "Button",
    "DropDown",
    nullptr
  };
  return names;
}

inline const char *EnumNameUIElementType(UIElementType e) {
  if (::flatbuffers::IsOutRange(e, UIElementType_None, UIElementType_DropDown)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesUIElementType()[index];
}

enum LayoutType : int8_t {
  LayoutType_None = 0,
  LayoutType_Horizontal = 1,
  LayoutType_Vertical = 2,
  LayoutType_Grid = 3,
  LayoutType_MIN = LayoutType_None,
  LayoutType_MAX = LayoutType_Grid
};

inline const LayoutType (&EnumValuesLayoutType())[4] {
  static const LayoutType values[] = {
    LayoutType_None,
    LayoutType_Horizontal,
    LayoutType_Vertical,
    LayoutType_Grid
  };
  return values;
}

inline const char * const *EnumNamesLayoutType() {
  static const char * const names[5] = {
    "None",
    "Horizontal",
    "Vertical",
    "Grid",
    nullptr
  };
  return names;
}

inline const char *EnumNameLayoutType(LayoutType e) {
  if (::flatbuffers::IsOutRange(e, LayoutType_None, LayoutType_Grid)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLayoutType()[index];
}

enum UIElementDataUnion : uint8_t {
  UIElementDataUnion_NONE = 0,
  UIElementDataUnion_PanelData = 1,
  UIElementDataUnion_ButtonData = 2,
  UIElementDataUnion_DropDownData = 3,
  UIElementDataUnion_MIN = UIElementDataUnion_NONE,
  UIElementDataUnion_MAX = UIElementDataUnion_DropDownData
};

inline const UIElementDataUnion (&EnumValuesUIElementDataUnion())[4] {
  static const UIElementDataUnion values[] = {
    UIElementDataUnion_NONE,
    UIElementDataUnion_PanelData,
    UIElementDataUnion_ButtonData,
    UIElementDataUnion_DropDownData
  };
  return values;
}

inline const char * const *EnumNamesUIElementDataUnion() {
  static const char * const names[5] = {
    "NONE",
    "PanelData",
    "ButtonData",
    "DropDownData",
    nullptr
  };
  return names;
}

inline const char *EnumNameUIElementDataUnion(UIElementDataUnion e) {
  if (::flatbuffers::IsOutRange(e, UIElementDataUnion_NONE, UIElementDataUnion_DropDownData)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesUIElementDataUnion()[index];
}

template<typename T> struct UIElementDataUnionTraits {
  static const UIElementDataUnion enum_value = UIElementDataUnion_NONE;
};

template<> struct UIElementDataUnionTraits<steamrot::PanelData> {
  static const UIElementDataUnion enum_value = UIElementDataUnion_PanelData;
};

template<> struct UIElementDataUnionTraits<steamrot::ButtonData> {
  static const UIElementDataUnion enum_value = UIElementDataUnion_ButtonData;
};

template<> struct UIElementDataUnionTraits<steamrot::DropDownData> {
  static const UIElementDataUnion enum_value = UIElementDataUnion_DropDownData;
};

bool VerifyUIElementDataUnion(::flatbuffers::Verifier &verifier, const void *obj, UIElementDataUnion type);
bool VerifyUIElementDataUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct UIElementDataPackageData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UIElementDataPackageDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SCENE_TYPE = 4
  };
  const ::flatbuffers::String *scene_type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCENE_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SCENE_TYPE) &&
           verifier.VerifyString(scene_type()) &&
           verifier.EndTable();
  }
};

struct UIElementDataPackageDataBuilder {
  typedef UIElementDataPackageData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_scene_type(::flatbuffers::Offset<::flatbuffers::String> scene_type) {
    fbb_.AddOffset(UIElementDataPackageData::VT_SCENE_TYPE, scene_type);
  }
  explicit UIElementDataPackageDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UIElementDataPackageData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UIElementDataPackageData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UIElementDataPackageData> CreateUIElementDataPackageData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> scene_type = 0) {
  UIElementDataPackageDataBuilder builder_(_fbb);
  builder_.add_scene_type(scene_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UIElementDataPackageData> CreateUIElementDataPackageDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *scene_type = nullptr) {
  auto scene_type__ = scene_type ? _fbb.CreateString(scene_type) : 0;
  return steamrot::CreateUIElementDataPackageData(
      _fbb,
      scene_type__);
}

struct PanelData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PanelDataBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PanelDataBuilder {
  typedef PanelData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit PanelDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PanelData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PanelData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PanelData> CreatePanelData(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  PanelDataBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ButtonData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ButtonDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LABEL = 4
  };
  const ::flatbuffers::String *label() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LABEL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_LABEL) &&
           verifier.VerifyString(label()) &&
           verifier.EndTable();
  }
};

struct ButtonDataBuilder {
  typedef ButtonData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_label(::flatbuffers::Offset<::flatbuffers::String> label) {
    fbb_.AddOffset(ButtonData::VT_LABEL, label);
  }
  explicit ButtonDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ButtonData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ButtonData>(end);
    fbb_.Required(o, ButtonData::VT_LABEL);
    return o;
  }
};

inline ::flatbuffers::Offset<ButtonData> CreateButtonData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> label = 0) {
  ButtonDataBuilder builder_(_fbb);
  builder_.add_label(label);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ButtonData> CreateButtonDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *label = nullptr) {
  auto label__ = label ? _fbb.CreateString(label) : 0;
  return steamrot::CreateButtonData(
      _fbb,
      label__);
}

struct DropDownData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DropDownDataBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct DropDownDataBuilder {
  typedef DropDownData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit DropDownDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DropDownData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DropDownData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DropDownData> CreateDropDownData(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  DropDownDataBuilder builder_(_fbb);
  return builder_.Finish();
}

struct UIElementData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UIElementDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_CHILDREN = 6,
    VT_LAYOUT = 8,
    VT_POSITION = 10,
    VT_SIZE = 12,
    VT_ELEMENT_TYPE = 14,
    VT_ELEMENT = 16,
    VT_ACTION = 18,
    VT_DATA = 20
  };
  steamrot::UIElementType type() const {
    return static_cast<steamrot::UIElementType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIElementData>> *children() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIElementData>> *>(VT_CHILDREN);
  }
  steamrot::LayoutType layout() const {
    return static_cast<steamrot::LayoutType>(GetField<int8_t>(VT_LAYOUT, 0));
  }
  const Vector2f *position() const {
    return GetPointer<const Vector2f *>(VT_POSITION);
  }
  const Vector2f *size() const {
    return GetPointer<const Vector2f *>(VT_SIZE);
  }
  steamrot::UIElementDataUnion element_type() const {
    return static_cast<steamrot::UIElementDataUnion>(GetField<uint8_t>(VT_ELEMENT_TYPE, 0));
  }
  const void *element() const {
    return GetPointer<const void *>(VT_ELEMENT);
  }
  template<typename T> const T *element_as() const;
  const steamrot::PanelData *element_as_PanelData() const {
    return element_type() == steamrot::UIElementDataUnion_PanelData ? static_cast<const steamrot::PanelData *>(element()) : nullptr;
  }
  const steamrot::ButtonData *element_as_ButtonData() const {
    return element_type() == steamrot::UIElementDataUnion_ButtonData ? static_cast<const steamrot::ButtonData *>(element()) : nullptr;
  }
  const steamrot::DropDownData *element_as_DropDownData() const {
    return element_type() == steamrot::UIElementDataUnion_DropDownData ? static_cast<const steamrot::DropDownData *>(element()) : nullptr;
  }
  const steamrot::Action *action() const {
    return GetPointer<const steamrot::Action *>(VT_ACTION);
  }
  const steamrot::UIElementDataPackageData *data() const {
    return GetPointer<const steamrot::UIElementDataPackageData *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           VerifyField<int8_t>(verifier, VT_LAYOUT, 1) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyOffset(verifier, VT_SIZE) &&
           verifier.VerifyTable(size()) &&
           VerifyField<uint8_t>(verifier, VT_ELEMENT_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_ELEMENT) &&
           VerifyUIElementDataUnion(verifier, element(), element_type()) &&
           VerifyOffset(verifier, VT_ACTION) &&
           verifier.VerifyTable(action()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           verifier.EndTable();
  }
};

template<> inline const steamrot::PanelData *UIElementData::element_as<steamrot::PanelData>() const {
  return element_as_PanelData();
}

template<> inline const steamrot::ButtonData *UIElementData::element_as<steamrot::ButtonData>() const {
  return element_as_ButtonData();
}

template<> inline const steamrot::DropDownData *UIElementData::element_as<steamrot::DropDownData>() const {
  return element_as_DropDownData();
}

struct UIElementDataBuilder {
  typedef UIElementData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(steamrot::UIElementType type) {
    fbb_.AddElement<int8_t>(UIElementData::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIElementData>>> children) {
    fbb_.AddOffset(UIElementData::VT_CHILDREN, children);
  }
  void add_layout(steamrot::LayoutType layout) {
    fbb_.AddElement<int8_t>(UIElementData::VT_LAYOUT, static_cast<int8_t>(layout), 0);
  }
  void add_position(::flatbuffers::Offset<Vector2f> position) {
    fbb_.AddOffset(UIElementData::VT_POSITION, position);
  }
  void add_size(::flatbuffers::Offset<Vector2f> size) {
    fbb_.AddOffset(UIElementData::VT_SIZE, size);
  }
  void add_element_type(steamrot::UIElementDataUnion element_type) {
    fbb_.AddElement<uint8_t>(UIElementData::VT_ELEMENT_TYPE, static_cast<uint8_t>(element_type), 0);
  }
  void add_element(::flatbuffers::Offset<void> element) {
    fbb_.AddOffset(UIElementData::VT_ELEMENT, element);
  }
  void add_action(::flatbuffers::Offset<steamrot::Action> action) {
    fbb_.AddOffset(UIElementData::VT_ACTION, action);
  }
  void add_data(::flatbuffers::Offset<steamrot::UIElementDataPackageData> data) {
    fbb_.AddOffset(UIElementData::VT_DATA, data);
  }
  explicit UIElementDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UIElementData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UIElementData>(end);
    fbb_.Required(o, UIElementData::VT_ELEMENT);
    return o;
  }
};

inline ::flatbuffers::Offset<UIElementData> CreateUIElementData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::UIElementType type = steamrot::UIElementType_None,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIElementData>>> children = 0,
    steamrot::LayoutType layout = steamrot::LayoutType_None,
    ::flatbuffers::Offset<Vector2f> position = 0,
    ::flatbuffers::Offset<Vector2f> size = 0,
    steamrot::UIElementDataUnion element_type = steamrot::UIElementDataUnion_NONE,
    ::flatbuffers::Offset<void> element = 0,
    ::flatbuffers::Offset<steamrot::Action> action = 0,
    ::flatbuffers::Offset<steamrot::UIElementDataPackageData> data = 0) {
  UIElementDataBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_action(action);
  builder_.add_element(element);
  builder_.add_size(size);
  builder_.add_position(position);
  builder_.add_children(children);
  builder_.add_element_type(element_type);
  builder_.add_layout(layout);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UIElementData> CreateUIElementDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::UIElementType type = steamrot::UIElementType_None,
    const std::vector<::flatbuffers::Offset<steamrot::UIElementData>> *children = nullptr,
    steamrot::LayoutType layout = steamrot::LayoutType_None,
    ::flatbuffers::Offset<Vector2f> position = 0,
    ::flatbuffers::Offset<Vector2f> size = 0,
    steamrot::UIElementDataUnion element_type = steamrot::UIElementDataUnion_NONE,
    ::flatbuffers::Offset<void> element = 0,
    ::flatbuffers::Offset<steamrot::Action> action = 0,
    ::flatbuffers::Offset<steamrot::UIElementDataPackageData> data = 0) {
  auto children__ = children ? _fbb.CreateVector<::flatbuffers::Offset<steamrot::UIElementData>>(*children) : 0;
  return steamrot::CreateUIElementData(
      _fbb,
      type,
      children__,
      layout,
      position,
      size,
      element_type,
      element,
      action,
      data);
}

struct UserInterface FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UserInterfaceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOT_UI_ELEMENT = 4,
    VT_UI_NAME = 6,
    VT_START_VISIBLE = 8
  };
  const steamrot::UIElementData *root_ui_element() const {
    return GetPointer<const steamrot::UIElementData *>(VT_ROOT_UI_ELEMENT);
  }
  const ::flatbuffers::String *ui_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UI_NAME);
  }
  bool start_visible() const {
    return GetField<uint8_t>(VT_START_VISIBLE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ROOT_UI_ELEMENT) &&
           verifier.VerifyTable(root_ui_element()) &&
           VerifyOffset(verifier, VT_UI_NAME) &&
           verifier.VerifyString(ui_name()) &&
           VerifyField<uint8_t>(verifier, VT_START_VISIBLE, 1) &&
           verifier.EndTable();
  }
};

struct UserInterfaceBuilder {
  typedef UserInterface Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_root_ui_element(::flatbuffers::Offset<steamrot::UIElementData> root_ui_element) {
    fbb_.AddOffset(UserInterface::VT_ROOT_UI_ELEMENT, root_ui_element);
  }
  void add_ui_name(::flatbuffers::Offset<::flatbuffers::String> ui_name) {
    fbb_.AddOffset(UserInterface::VT_UI_NAME, ui_name);
  }
  void add_start_visible(bool start_visible) {
    fbb_.AddElement<uint8_t>(UserInterface::VT_START_VISIBLE, static_cast<uint8_t>(start_visible), 0);
  }
  explicit UserInterfaceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UserInterface> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UserInterface>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UserInterface> CreateUserInterface(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> root_ui_element = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ui_name = 0,
    bool start_visible = false) {
  UserInterfaceBuilder builder_(_fbb);
  builder_.add_ui_name(ui_name);
  builder_.add_root_ui_element(root_ui_element);
  builder_.add_start_visible(start_visible);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UserInterface> CreateUserInterfaceDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> root_ui_element = 0,
    const char *ui_name = nullptr,
    bool start_visible = false) {
  auto ui_name__ = ui_name ? _fbb.CreateString(ui_name) : 0;
  return steamrot::CreateUserInterface(
      _fbb,
      root_ui_element,
      ui_name__,
      start_visible);
}

inline bool VerifyUIElementDataUnion(::flatbuffers::Verifier &verifier, const void *obj, UIElementDataUnion type) {
  switch (type) {
    case UIElementDataUnion_NONE: {
      return true;
    }
    case UIElementDataUnion_PanelData: {
      auto ptr = reinterpret_cast<const steamrot::PanelData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UIElementDataUnion_ButtonData: {
      auto ptr = reinterpret_cast<const steamrot::ButtonData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UIElementDataUnion_DropDownData: {
      auto ptr = reinterpret_cast<const steamrot::DropDownData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyUIElementDataUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyUIElementDataUnion(
        verifier,  values->Get(i), types->GetEnum<UIElementDataUnion>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_USERINTERFACE_STEAMROT_H_

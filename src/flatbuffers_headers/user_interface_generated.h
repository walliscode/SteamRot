// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USERINTERFACE_STEAMROT_H_
#define FLATBUFFERS_GENERATED_USERINTERFACE_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "types_generated.h"

namespace steamrot {

struct UIElementData;
struct UIElementDataBuilder;

struct UserInterface;
struct UserInterfaceBuilder;

enum UIElementType : int8_t {
  UIElementType_None = 0,
  UIElementType_Panel = 1,
  UIElementType_Button = 2,
  UIElementType_MIN = UIElementType_None,
  UIElementType_MAX = UIElementType_Button
};

inline const UIElementType (&EnumValuesUIElementType())[3] {
  static const UIElementType values[] = {
    UIElementType_None,
    UIElementType_Panel,
    UIElementType_Button
  };
  return values;
}

inline const char * const *EnumNamesUIElementType() {
  static const char * const names[4] = {
    "None",
    "Panel",
    "Button",
    nullptr
  };
  return names;
}

inline const char *EnumNameUIElementType(UIElementType e) {
  if (::flatbuffers::IsOutRange(e, UIElementType_None, UIElementType_Button)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesUIElementType()[index];
}

enum LayoutType : int8_t {
  LayoutType_None = 0,
  LayoutType_Horizontal = 1,
  LayoutType_Vertical = 2,
  LayoutType_Grid = 3,
  LayoutType_MIN = LayoutType_None,
  LayoutType_MAX = LayoutType_Grid
};

inline const LayoutType (&EnumValuesLayoutType())[4] {
  static const LayoutType values[] = {
    LayoutType_None,
    LayoutType_Horizontal,
    LayoutType_Vertical,
    LayoutType_Grid
  };
  return values;
}

inline const char * const *EnumNamesLayoutType() {
  static const char * const names[5] = {
    "None",
    "Horizontal",
    "Vertical",
    "Grid",
    nullptr
  };
  return names;
}

inline const char *EnumNameLayoutType(LayoutType e) {
  if (::flatbuffers::IsOutRange(e, LayoutType_None, LayoutType_Grid)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLayoutType()[index];
}

struct UIElementData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UIElementDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_CHILDREN = 6,
    VT_LAYOUT = 8,
    VT_POSITION = 10,
    VT_SIZE = 12,
    VT_LABEL = 14
  };
  steamrot::UIElementType type() const {
    return static_cast<steamrot::UIElementType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIElementData>> *children() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIElementData>> *>(VT_CHILDREN);
  }
  steamrot::LayoutType layout() const {
    return static_cast<steamrot::LayoutType>(GetField<int8_t>(VT_LAYOUT, 0));
  }
  const Vector2f *position() const {
    return GetPointer<const Vector2f *>(VT_POSITION);
  }
  const Vector2f *size() const {
    return GetPointer<const Vector2f *>(VT_SIZE);
  }
  const ::flatbuffers::String *label() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LABEL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           VerifyField<int8_t>(verifier, VT_LAYOUT, 1) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyOffset(verifier, VT_SIZE) &&
           verifier.VerifyTable(size()) &&
           VerifyOffset(verifier, VT_LABEL) &&
           verifier.VerifyString(label()) &&
           verifier.EndTable();
  }
};

struct UIElementDataBuilder {
  typedef UIElementData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(steamrot::UIElementType type) {
    fbb_.AddElement<int8_t>(UIElementData::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIElementData>>> children) {
    fbb_.AddOffset(UIElementData::VT_CHILDREN, children);
  }
  void add_layout(steamrot::LayoutType layout) {
    fbb_.AddElement<int8_t>(UIElementData::VT_LAYOUT, static_cast<int8_t>(layout), 0);
  }
  void add_position(::flatbuffers::Offset<Vector2f> position) {
    fbb_.AddOffset(UIElementData::VT_POSITION, position);
  }
  void add_size(::flatbuffers::Offset<Vector2f> size) {
    fbb_.AddOffset(UIElementData::VT_SIZE, size);
  }
  void add_label(::flatbuffers::Offset<::flatbuffers::String> label) {
    fbb_.AddOffset(UIElementData::VT_LABEL, label);
  }
  explicit UIElementDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UIElementData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UIElementData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UIElementData> CreateUIElementData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::UIElementType type = steamrot::UIElementType_None,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIElementData>>> children = 0,
    steamrot::LayoutType layout = steamrot::LayoutType_None,
    ::flatbuffers::Offset<Vector2f> position = 0,
    ::flatbuffers::Offset<Vector2f> size = 0,
    ::flatbuffers::Offset<::flatbuffers::String> label = 0) {
  UIElementDataBuilder builder_(_fbb);
  builder_.add_label(label);
  builder_.add_size(size);
  builder_.add_position(position);
  builder_.add_children(children);
  builder_.add_layout(layout);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UIElementData> CreateUIElementDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::UIElementType type = steamrot::UIElementType_None,
    const std::vector<::flatbuffers::Offset<steamrot::UIElementData>> *children = nullptr,
    steamrot::LayoutType layout = steamrot::LayoutType_None,
    ::flatbuffers::Offset<Vector2f> position = 0,
    ::flatbuffers::Offset<Vector2f> size = 0,
    const char *label = nullptr) {
  auto children__ = children ? _fbb.CreateVector<::flatbuffers::Offset<steamrot::UIElementData>>(*children) : 0;
  auto label__ = label ? _fbb.CreateString(label) : 0;
  return steamrot::CreateUIElementData(
      _fbb,
      type,
      children__,
      layout,
      position,
      size,
      label__);
}

struct UserInterface FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UserInterfaceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOT_UI_ELEMENT = 4
  };
  const steamrot::UIElementData *root_ui_element() const {
    return GetPointer<const steamrot::UIElementData *>(VT_ROOT_UI_ELEMENT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ROOT_UI_ELEMENT) &&
           verifier.VerifyTable(root_ui_element()) &&
           verifier.EndTable();
  }
};

struct UserInterfaceBuilder {
  typedef UserInterface Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_root_ui_element(::flatbuffers::Offset<steamrot::UIElementData> root_ui_element) {
    fbb_.AddOffset(UserInterface::VT_ROOT_UI_ELEMENT, root_ui_element);
  }
  explicit UserInterfaceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UserInterface> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UserInterface>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UserInterface> CreateUserInterface(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> root_ui_element = 0) {
  UserInterfaceBuilder builder_(_fbb);
  builder_.add_root_ui_element(root_ui_element);
  return builder_.Finish();
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_USERINTERFACE_STEAMROT_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USERINTERFACE_STEAMROT_H_
#define FLATBUFFERS_GENERATED_USERINTERFACE_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace steamrot {

struct UIElementData;
struct UIElementDataBuilder;

struct UserInterface;
struct UserInterfaceBuilder;

enum UIElementType : int8_t {
  UIElementType_None = 0,
  UIElementType_DropDownMenu = 1,
  UIElementType_MIN = UIElementType_None,
  UIElementType_MAX = UIElementType_DropDownMenu
};

inline const UIElementType (&EnumValuesUIElementType())[2] {
  static const UIElementType values[] = {
    UIElementType_None,
    UIElementType_DropDownMenu
  };
  return values;
}

inline const char * const *EnumNamesUIElementType() {
  static const char * const names[3] = {
    "None",
    "DropDownMenu",
    nullptr
  };
  return names;
}

inline const char *EnumNameUIElementType(UIElementType e) {
  if (::flatbuffers::IsOutRange(e, UIElementType_None, UIElementType_DropDownMenu)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesUIElementType()[index];
}

struct UIElementData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UIElementDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_CHILDREN = 6,
    VT_COLUMN_LAYOUT = 8
  };
  steamrot::UIElementType type() const {
    return static_cast<steamrot::UIElementType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIElementData>> *children() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIElementData>> *>(VT_CHILDREN);
  }
  bool column_layout() const {
    return GetField<uint8_t>(VT_COLUMN_LAYOUT, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           VerifyField<uint8_t>(verifier, VT_COLUMN_LAYOUT, 1) &&
           verifier.EndTable();
  }
};

struct UIElementDataBuilder {
  typedef UIElementData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(steamrot::UIElementType type) {
    fbb_.AddElement<int8_t>(UIElementData::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIElementData>>> children) {
    fbb_.AddOffset(UIElementData::VT_CHILDREN, children);
  }
  void add_column_layout(bool column_layout) {
    fbb_.AddElement<uint8_t>(UIElementData::VT_COLUMN_LAYOUT, static_cast<uint8_t>(column_layout), 0);
  }
  explicit UIElementDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UIElementData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UIElementData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UIElementData> CreateUIElementData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::UIElementType type = steamrot::UIElementType_None,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIElementData>>> children = 0,
    bool column_layout = false) {
  UIElementDataBuilder builder_(_fbb);
  builder_.add_children(children);
  builder_.add_column_layout(column_layout);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UIElementData> CreateUIElementDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::UIElementType type = steamrot::UIElementType_None,
    const std::vector<::flatbuffers::Offset<steamrot::UIElementData>> *children = nullptr,
    bool column_layout = false) {
  auto children__ = children ? _fbb.CreateVector<::flatbuffers::Offset<steamrot::UIElementData>>(*children) : 0;
  return steamrot::CreateUIElementData(
      _fbb,
      type,
      children__,
      column_layout);
}

struct UserInterface FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UserInterfaceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOT_UI_ELEMENT = 4
  };
  const steamrot::UIElementData *root_ui_element() const {
    return GetPointer<const steamrot::UIElementData *>(VT_ROOT_UI_ELEMENT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ROOT_UI_ELEMENT) &&
           verifier.VerifyTable(root_ui_element()) &&
           verifier.EndTable();
  }
};

struct UserInterfaceBuilder {
  typedef UserInterface Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_root_ui_element(::flatbuffers::Offset<steamrot::UIElementData> root_ui_element) {
    fbb_.AddOffset(UserInterface::VT_ROOT_UI_ELEMENT, root_ui_element);
  }
  explicit UserInterfaceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UserInterface> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UserInterface>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UserInterface> CreateUserInterface(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> root_ui_element = 0) {
  UserInterfaceBuilder builder_(_fbb);
  builder_.add_root_ui_element(root_ui_element);
  return builder_.Finish();
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_USERINTERFACE_STEAMROT_H_

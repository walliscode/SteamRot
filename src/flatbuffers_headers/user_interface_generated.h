// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USERINTERFACE_STEAMROT_H_
#define FLATBUFFERS_GENERATED_USERINTERFACE_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "events_generated.h"
#include "scene_types_generated.h"
#include "types_generated.h"
#include "user_input_generated.h"

namespace steamrot {

struct SceneChangeDataFBS;
struct SceneChangeDataFBSBuilder;

struct child;
struct childBuilder;

struct UIElementData;
struct UIElementDataBuilder;

struct PanelData;
struct PanelDataBuilder;

struct ButtonData;
struct ButtonDataBuilder;

struct DropDownContainerData;
struct DropDownContainerDataBuilder;

struct DropDownListData;
struct DropDownListDataBuilder;

struct DropDownItemData;
struct DropDownItemDataBuilder;

struct DropDownButtonData;
struct DropDownButtonDataBuilder;

struct UserInterfaceData;
struct UserInterfaceDataBuilder;

enum LayoutType : int8_t {
  LayoutType_None = 0,
  LayoutType_Horizontal = 1,
  LayoutType_Vertical = 2,
  LayoutType_Grid = 3,
  LayoutType_DropDown = 4,
  LayoutType_MIN = LayoutType_None,
  LayoutType_MAX = LayoutType_DropDown
};

inline const LayoutType (&EnumValuesLayoutType())[5] {
  static const LayoutType values[] = {
    LayoutType_None,
    LayoutType_Horizontal,
    LayoutType_Vertical,
    LayoutType_Grid,
    LayoutType_DropDown
  };
  return values;
}

inline const char * const *EnumNamesLayoutType() {
  static const char * const names[6] = {
    "None",
    "Horizontal",
    "Vertical",
    "Grid",
    "DropDown",
    nullptr
  };
  return names;
}

inline const char *EnumNameLayoutType(LayoutType e) {
  if (::flatbuffers::IsOutRange(e, LayoutType_None, LayoutType_DropDown)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLayoutType()[index];
}

enum SpacingAndSizingType : int8_t {
  SpacingAndSizingType_None = 0,
  SpacingAndSizingType_Even = 1,
  SpacingAndSizingType_Ratioed = 2,
  SpacingAndSizingType_DropDownList = 3,
  SpacingAndSizingType_MIN = SpacingAndSizingType_None,
  SpacingAndSizingType_MAX = SpacingAndSizingType_DropDownList
};

inline const SpacingAndSizingType (&EnumValuesSpacingAndSizingType())[4] {
  static const SpacingAndSizingType values[] = {
    SpacingAndSizingType_None,
    SpacingAndSizingType_Even,
    SpacingAndSizingType_Ratioed,
    SpacingAndSizingType_DropDownList
  };
  return values;
}

inline const char * const *EnumNamesSpacingAndSizingType() {
  static const char * const names[5] = {
    "None",
    "Even",
    "Ratioed",
    "DropDownList",
    nullptr
  };
  return names;
}

inline const char *EnumNameSpacingAndSizingType(SpacingAndSizingType e) {
  if (::flatbuffers::IsOutRange(e, SpacingAndSizingType_None, SpacingAndSizingType_DropDownList)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSpacingAndSizingType()[index];
}

enum EventDataType : uint8_t {
  EventDataType_NONE = 0,
  EventDataType_UserInputBitsetData = 1,
  EventDataType_SceneChangeData = 2,
  EventDataType_UIElementName = 3,
  EventDataType_MIN = EventDataType_NONE,
  EventDataType_MAX = EventDataType_UIElementName
};

inline const EventDataType (&EnumValuesEventDataType())[4] {
  static const EventDataType values[] = {
    EventDataType_NONE,
    EventDataType_UserInputBitsetData,
    EventDataType_SceneChangeData,
    EventDataType_UIElementName
  };
  return values;
}

inline const char * const *EnumNamesEventDataType() {
  static const char * const names[5] = {
    "NONE",
    "UserInputBitsetData",
    "SceneChangeData",
    "UIElementName",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventDataType(EventDataType e) {
  if (::flatbuffers::IsOutRange(e, EventDataType_NONE, EventDataType_UIElementName)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEventDataType()[index];
}

template<typename T> struct EventDataTypeTraits {
  static const EventDataType enum_value = EventDataType_NONE;
};

template<> struct EventDataTypeTraits<steamrot::UserInputBitsetData> {
  static const EventDataType enum_value = EventDataType_UserInputBitsetData;
};

template<> struct EventDataTypeTraits<steamrot::SceneChangeDataFBS> {
  static const EventDataType enum_value = EventDataType_SceneChangeData;
};

template<> struct EventDataTypeTraits<::flatbuffers::String> {
  static const EventDataType enum_value = EventDataType_UIElementName;
};

bool VerifyEventDataType(::flatbuffers::Verifier &verifier, const void *obj, EventDataType type);
bool VerifyEventDataTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

enum UIElementDataUnion : uint8_t {
  UIElementDataUnion_NONE = 0,
  UIElementDataUnion_PanelData = 1,
  UIElementDataUnion_ButtonData = 2,
  UIElementDataUnion_DropDownListData = 3,
  UIElementDataUnion_DropDownContainerData = 4,
  UIElementDataUnion_DropDownItemData = 5,
  UIElementDataUnion_DropDownButtonData = 6,
  UIElementDataUnion_MIN = UIElementDataUnion_NONE,
  UIElementDataUnion_MAX = UIElementDataUnion_DropDownButtonData
};

inline const UIElementDataUnion (&EnumValuesUIElementDataUnion())[7] {
  static const UIElementDataUnion values[] = {
    UIElementDataUnion_NONE,
    UIElementDataUnion_PanelData,
    UIElementDataUnion_ButtonData,
    UIElementDataUnion_DropDownListData,
    UIElementDataUnion_DropDownContainerData,
    UIElementDataUnion_DropDownItemData,
    UIElementDataUnion_DropDownButtonData
  };
  return values;
}

inline const char * const *EnumNamesUIElementDataUnion() {
  static const char * const names[8] = {
    "NONE",
    "PanelData",
    "ButtonData",
    "DropDownListData",
    "DropDownContainerData",
    "DropDownItemData",
    "DropDownButtonData",
    nullptr
  };
  return names;
}

inline const char *EnumNameUIElementDataUnion(UIElementDataUnion e) {
  if (::flatbuffers::IsOutRange(e, UIElementDataUnion_NONE, UIElementDataUnion_DropDownButtonData)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesUIElementDataUnion()[index];
}

template<typename T> struct UIElementDataUnionTraits {
  static const UIElementDataUnion enum_value = UIElementDataUnion_NONE;
};

template<> struct UIElementDataUnionTraits<steamrot::PanelData> {
  static const UIElementDataUnion enum_value = UIElementDataUnion_PanelData;
};

template<> struct UIElementDataUnionTraits<steamrot::ButtonData> {
  static const UIElementDataUnion enum_value = UIElementDataUnion_ButtonData;
};

template<> struct UIElementDataUnionTraits<steamrot::DropDownListData> {
  static const UIElementDataUnion enum_value = UIElementDataUnion_DropDownListData;
};

template<> struct UIElementDataUnionTraits<steamrot::DropDownContainerData> {
  static const UIElementDataUnion enum_value = UIElementDataUnion_DropDownContainerData;
};

template<> struct UIElementDataUnionTraits<steamrot::DropDownItemData> {
  static const UIElementDataUnion enum_value = UIElementDataUnion_DropDownItemData;
};

template<> struct UIElementDataUnionTraits<steamrot::DropDownButtonData> {
  static const UIElementDataUnion enum_value = UIElementDataUnion_DropDownButtonData;
};

bool VerifyUIElementDataUnion(::flatbuffers::Verifier &verifier, const void *obj, UIElementDataUnion type);
bool VerifyUIElementDataUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

enum DataPopulateFunction : int8_t {
  DataPopulateFunction_None = 0,
  DataPopulateFunction_PopulateWithFragmentData = 1,
  DataPopulateFunction_MIN = DataPopulateFunction_None,
  DataPopulateFunction_MAX = DataPopulateFunction_PopulateWithFragmentData
};

inline const DataPopulateFunction (&EnumValuesDataPopulateFunction())[2] {
  static const DataPopulateFunction values[] = {
    DataPopulateFunction_None,
    DataPopulateFunction_PopulateWithFragmentData
  };
  return values;
}

inline const char * const *EnumNamesDataPopulateFunction() {
  static const char * const names[3] = {
    "None",
    "PopulateWithFragmentData",
    nullptr
  };
  return names;
}

inline const char *EnumNameDataPopulateFunction(DataPopulateFunction e) {
  if (::flatbuffers::IsOutRange(e, DataPopulateFunction_None, DataPopulateFunction_PopulateWithFragmentData)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDataPopulateFunction()[index];
}

struct SceneChangeDataFBS FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SceneChangeDataFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SCENE_TYPE = 4,
    VT_SCENE_ID = 6
  };
  steamrot::SceneType scene_type() const {
    return static_cast<steamrot::SceneType>(GetField<int8_t>(VT_SCENE_TYPE, 0));
  }
  const ::flatbuffers::String *scene_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCENE_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_SCENE_TYPE, 1) &&
           VerifyOffset(verifier, VT_SCENE_ID) &&
           verifier.VerifyString(scene_id()) &&
           verifier.EndTable();
  }
};

struct SceneChangeDataFBSBuilder {
  typedef SceneChangeDataFBS Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_scene_type(steamrot::SceneType scene_type) {
    fbb_.AddElement<int8_t>(SceneChangeDataFBS::VT_SCENE_TYPE, static_cast<int8_t>(scene_type), 0);
  }
  void add_scene_id(::flatbuffers::Offset<::flatbuffers::String> scene_id) {
    fbb_.AddOffset(SceneChangeDataFBS::VT_SCENE_ID, scene_id);
  }
  explicit SceneChangeDataFBSBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SceneChangeDataFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SceneChangeDataFBS>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SceneChangeDataFBS> CreateSceneChangeDataFBS(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::SceneType scene_type = steamrot::SceneType_UNKNOWN,
    ::flatbuffers::Offset<::flatbuffers::String> scene_id = 0) {
  SceneChangeDataFBSBuilder builder_(_fbb);
  builder_.add_scene_id(scene_id);
  builder_.add_scene_type(scene_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SceneChangeDataFBS> CreateSceneChangeDataFBSDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::SceneType scene_type = steamrot::SceneType_UNKNOWN,
    const char *scene_id = nullptr) {
  auto scene_id__ = scene_id ? _fbb.CreateString(scene_id) : 0;
  return steamrot::CreateSceneChangeDataFBS(
      _fbb,
      scene_type,
      scene_id__);
}

struct child FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef childBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ELEMENT_TYPE = 4,
    VT_ELEMENT = 6
  };
  steamrot::UIElementDataUnion element_type() const {
    return static_cast<steamrot::UIElementDataUnion>(GetField<uint8_t>(VT_ELEMENT_TYPE, 0));
  }
  const void *element() const {
    return GetPointer<const void *>(VT_ELEMENT);
  }
  template<typename T> const T *element_as() const;
  const steamrot::PanelData *element_as_PanelData() const {
    return element_type() == steamrot::UIElementDataUnion_PanelData ? static_cast<const steamrot::PanelData *>(element()) : nullptr;
  }
  const steamrot::ButtonData *element_as_ButtonData() const {
    return element_type() == steamrot::UIElementDataUnion_ButtonData ? static_cast<const steamrot::ButtonData *>(element()) : nullptr;
  }
  const steamrot::DropDownListData *element_as_DropDownListData() const {
    return element_type() == steamrot::UIElementDataUnion_DropDownListData ? static_cast<const steamrot::DropDownListData *>(element()) : nullptr;
  }
  const steamrot::DropDownContainerData *element_as_DropDownContainerData() const {
    return element_type() == steamrot::UIElementDataUnion_DropDownContainerData ? static_cast<const steamrot::DropDownContainerData *>(element()) : nullptr;
  }
  const steamrot::DropDownItemData *element_as_DropDownItemData() const {
    return element_type() == steamrot::UIElementDataUnion_DropDownItemData ? static_cast<const steamrot::DropDownItemData *>(element()) : nullptr;
  }
  const steamrot::DropDownButtonData *element_as_DropDownButtonData() const {
    return element_type() == steamrot::UIElementDataUnion_DropDownButtonData ? static_cast<const steamrot::DropDownButtonData *>(element()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ELEMENT_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_ELEMENT) &&
           VerifyUIElementDataUnion(verifier, element(), element_type()) &&
           verifier.EndTable();
  }
};

template<> inline const steamrot::PanelData *child::element_as<steamrot::PanelData>() const {
  return element_as_PanelData();
}

template<> inline const steamrot::ButtonData *child::element_as<steamrot::ButtonData>() const {
  return element_as_ButtonData();
}

template<> inline const steamrot::DropDownListData *child::element_as<steamrot::DropDownListData>() const {
  return element_as_DropDownListData();
}

template<> inline const steamrot::DropDownContainerData *child::element_as<steamrot::DropDownContainerData>() const {
  return element_as_DropDownContainerData();
}

template<> inline const steamrot::DropDownItemData *child::element_as<steamrot::DropDownItemData>() const {
  return element_as_DropDownItemData();
}

template<> inline const steamrot::DropDownButtonData *child::element_as<steamrot::DropDownButtonData>() const {
  return element_as_DropDownButtonData();
}

struct childBuilder {
  typedef child Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_element_type(steamrot::UIElementDataUnion element_type) {
    fbb_.AddElement<uint8_t>(child::VT_ELEMENT_TYPE, static_cast<uint8_t>(element_type), 0);
  }
  void add_element(::flatbuffers::Offset<void> element) {
    fbb_.AddOffset(child::VT_ELEMENT, element);
  }
  explicit childBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<child> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<child>(end);
    fbb_.Required(o, child::VT_ELEMENT);
    return o;
  }
};

inline ::flatbuffers::Offset<child> Createchild(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::UIElementDataUnion element_type = steamrot::UIElementDataUnion_NONE,
    ::flatbuffers::Offset<void> element = 0) {
  childBuilder builder_(_fbb);
  builder_.add_element(element);
  builder_.add_element_type(element_type);
  return builder_.Finish();
}

struct UIElementData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UIElementDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_SIZE = 6,
    VT_CHILDREN_ACTIVE = 8,
    VT_CHILDREN = 10,
    VT_LAYOUT = 12,
    VT_SPACING_STRATEGY = 14
  };
  const Vector2fData *position() const {
    return GetPointer<const Vector2fData *>(VT_POSITION);
  }
  const Vector2fData *size() const {
    return GetPointer<const Vector2fData *>(VT_SIZE);
  }
  bool children_active() const {
    return GetField<uint8_t>(VT_CHILDREN_ACTIVE, 0) != 0;
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::child>> *children() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::child>> *>(VT_CHILDREN);
  }
  steamrot::LayoutType layout() const {
    return static_cast<steamrot::LayoutType>(GetField<int8_t>(VT_LAYOUT, 0));
  }
  steamrot::SpacingAndSizingType spacing_strategy() const {
    return static_cast<steamrot::SpacingAndSizingType>(GetField<int8_t>(VT_SPACING_STRATEGY, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyOffsetRequired(verifier, VT_SIZE) &&
           verifier.VerifyTable(size()) &&
           VerifyField<uint8_t>(verifier, VT_CHILDREN_ACTIVE, 1) &&
           VerifyOffsetRequired(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           VerifyField<int8_t>(verifier, VT_LAYOUT, 1) &&
           VerifyField<int8_t>(verifier, VT_SPACING_STRATEGY, 1) &&
           verifier.EndTable();
  }
};

struct UIElementDataBuilder {
  typedef UIElementData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(::flatbuffers::Offset<Vector2fData> position) {
    fbb_.AddOffset(UIElementData::VT_POSITION, position);
  }
  void add_size(::flatbuffers::Offset<Vector2fData> size) {
    fbb_.AddOffset(UIElementData::VT_SIZE, size);
  }
  void add_children_active(bool children_active) {
    fbb_.AddElement<uint8_t>(UIElementData::VT_CHILDREN_ACTIVE, static_cast<uint8_t>(children_active), 0);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::child>>> children) {
    fbb_.AddOffset(UIElementData::VT_CHILDREN, children);
  }
  void add_layout(steamrot::LayoutType layout) {
    fbb_.AddElement<int8_t>(UIElementData::VT_LAYOUT, static_cast<int8_t>(layout), 0);
  }
  void add_spacing_strategy(steamrot::SpacingAndSizingType spacing_strategy) {
    fbb_.AddElement<int8_t>(UIElementData::VT_SPACING_STRATEGY, static_cast<int8_t>(spacing_strategy), 0);
  }
  explicit UIElementDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UIElementData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UIElementData>(end);
    fbb_.Required(o, UIElementData::VT_POSITION);
    fbb_.Required(o, UIElementData::VT_SIZE);
    fbb_.Required(o, UIElementData::VT_CHILDREN);
    return o;
  }
};

inline ::flatbuffers::Offset<UIElementData> CreateUIElementData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Vector2fData> position = 0,
    ::flatbuffers::Offset<Vector2fData> size = 0,
    bool children_active = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::child>>> children = 0,
    steamrot::LayoutType layout = steamrot::LayoutType_None,
    steamrot::SpacingAndSizingType spacing_strategy = steamrot::SpacingAndSizingType_None) {
  UIElementDataBuilder builder_(_fbb);
  builder_.add_children(children);
  builder_.add_size(size);
  builder_.add_position(position);
  builder_.add_spacing_strategy(spacing_strategy);
  builder_.add_layout(layout);
  builder_.add_children_active(children_active);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UIElementData> CreateUIElementDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Vector2fData> position = 0,
    ::flatbuffers::Offset<Vector2fData> size = 0,
    bool children_active = false,
    const std::vector<::flatbuffers::Offset<steamrot::child>> *children = nullptr,
    steamrot::LayoutType layout = steamrot::LayoutType_None,
    steamrot::SpacingAndSizingType spacing_strategy = steamrot::SpacingAndSizingType_None) {
  auto children__ = children ? _fbb.CreateVector<::flatbuffers::Offset<steamrot::child>>(*children) : 0;
  return steamrot::CreateUIElementData(
      _fbb,
      position,
      size,
      children_active,
      children__,
      layout,
      spacing_strategy);
}

struct PanelData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PanelDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE_DATA = 4
  };
  const steamrot::UIElementData *base_data() const {
    return GetPointer<const steamrot::UIElementData *>(VT_BASE_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE_DATA) &&
           verifier.VerifyTable(base_data()) &&
           verifier.EndTable();
  }
};

struct PanelDataBuilder {
  typedef PanelData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base_data(::flatbuffers::Offset<steamrot::UIElementData> base_data) {
    fbb_.AddOffset(PanelData::VT_BASE_DATA, base_data);
  }
  explicit PanelDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PanelData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PanelData>(end);
    fbb_.Required(o, PanelData::VT_BASE_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<PanelData> CreatePanelData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> base_data = 0) {
  PanelDataBuilder builder_(_fbb);
  builder_.add_base_data(base_data);
  return builder_.Finish();
}

struct ButtonData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ButtonDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE_DATA = 4,
    VT_LABEL = 6
  };
  const steamrot::UIElementData *base_data() const {
    return GetPointer<const steamrot::UIElementData *>(VT_BASE_DATA);
  }
  const ::flatbuffers::String *label() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LABEL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE_DATA) &&
           verifier.VerifyTable(base_data()) &&
           VerifyOffsetRequired(verifier, VT_LABEL) &&
           verifier.VerifyString(label()) &&
           verifier.EndTable();
  }
};

struct ButtonDataBuilder {
  typedef ButtonData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base_data(::flatbuffers::Offset<steamrot::UIElementData> base_data) {
    fbb_.AddOffset(ButtonData::VT_BASE_DATA, base_data);
  }
  void add_label(::flatbuffers::Offset<::flatbuffers::String> label) {
    fbb_.AddOffset(ButtonData::VT_LABEL, label);
  }
  explicit ButtonDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ButtonData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ButtonData>(end);
    fbb_.Required(o, ButtonData::VT_BASE_DATA);
    fbb_.Required(o, ButtonData::VT_LABEL);
    return o;
  }
};

inline ::flatbuffers::Offset<ButtonData> CreateButtonData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> base_data = 0,
    ::flatbuffers::Offset<::flatbuffers::String> label = 0) {
  ButtonDataBuilder builder_(_fbb);
  builder_.add_label(label);
  builder_.add_base_data(base_data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ButtonData> CreateButtonDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> base_data = 0,
    const char *label = nullptr) {
  auto label__ = label ? _fbb.CreateString(label) : 0;
  return steamrot::CreateButtonData(
      _fbb,
      base_data,
      label__);
}

struct DropDownContainerData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DropDownContainerDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE_DATA = 4
  };
  const steamrot::UIElementData *base_data() const {
    return GetPointer<const steamrot::UIElementData *>(VT_BASE_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE_DATA) &&
           verifier.VerifyTable(base_data()) &&
           verifier.EndTable();
  }
};

struct DropDownContainerDataBuilder {
  typedef DropDownContainerData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base_data(::flatbuffers::Offset<steamrot::UIElementData> base_data) {
    fbb_.AddOffset(DropDownContainerData::VT_BASE_DATA, base_data);
  }
  explicit DropDownContainerDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DropDownContainerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DropDownContainerData>(end);
    fbb_.Required(o, DropDownContainerData::VT_BASE_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<DropDownContainerData> CreateDropDownContainerData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> base_data = 0) {
  DropDownContainerDataBuilder builder_(_fbb);
  builder_.add_base_data(base_data);
  return builder_.Finish();
}

struct DropDownListData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DropDownListDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE_DATA = 4,
    VT_LABEL = 6,
    VT_EXPANDED_LABEL = 8,
    VT_DATA_POPULATE_FUNCTION = 10
  };
  const steamrot::UIElementData *base_data() const {
    return GetPointer<const steamrot::UIElementData *>(VT_BASE_DATA);
  }
  const ::flatbuffers::String *label() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LABEL);
  }
  const ::flatbuffers::String *expanded_label() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXPANDED_LABEL);
  }
  steamrot::DataPopulateFunction data_populate_function() const {
    return static_cast<steamrot::DataPopulateFunction>(GetField<int8_t>(VT_DATA_POPULATE_FUNCTION, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE_DATA) &&
           verifier.VerifyTable(base_data()) &&
           VerifyOffsetRequired(verifier, VT_LABEL) &&
           verifier.VerifyString(label()) &&
           VerifyOffsetRequired(verifier, VT_EXPANDED_LABEL) &&
           verifier.VerifyString(expanded_label()) &&
           VerifyField<int8_t>(verifier, VT_DATA_POPULATE_FUNCTION, 1) &&
           verifier.EndTable();
  }
};

struct DropDownListDataBuilder {
  typedef DropDownListData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base_data(::flatbuffers::Offset<steamrot::UIElementData> base_data) {
    fbb_.AddOffset(DropDownListData::VT_BASE_DATA, base_data);
  }
  void add_label(::flatbuffers::Offset<::flatbuffers::String> label) {
    fbb_.AddOffset(DropDownListData::VT_LABEL, label);
  }
  void add_expanded_label(::flatbuffers::Offset<::flatbuffers::String> expanded_label) {
    fbb_.AddOffset(DropDownListData::VT_EXPANDED_LABEL, expanded_label);
  }
  void add_data_populate_function(steamrot::DataPopulateFunction data_populate_function) {
    fbb_.AddElement<int8_t>(DropDownListData::VT_DATA_POPULATE_FUNCTION, static_cast<int8_t>(data_populate_function), 0);
  }
  explicit DropDownListDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DropDownListData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DropDownListData>(end);
    fbb_.Required(o, DropDownListData::VT_BASE_DATA);
    fbb_.Required(o, DropDownListData::VT_LABEL);
    fbb_.Required(o, DropDownListData::VT_EXPANDED_LABEL);
    return o;
  }
};

inline ::flatbuffers::Offset<DropDownListData> CreateDropDownListData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> base_data = 0,
    ::flatbuffers::Offset<::flatbuffers::String> label = 0,
    ::flatbuffers::Offset<::flatbuffers::String> expanded_label = 0,
    steamrot::DataPopulateFunction data_populate_function = steamrot::DataPopulateFunction_None) {
  DropDownListDataBuilder builder_(_fbb);
  builder_.add_expanded_label(expanded_label);
  builder_.add_label(label);
  builder_.add_base_data(base_data);
  builder_.add_data_populate_function(data_populate_function);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DropDownListData> CreateDropDownListDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> base_data = 0,
    const char *label = nullptr,
    const char *expanded_label = nullptr,
    steamrot::DataPopulateFunction data_populate_function = steamrot::DataPopulateFunction_None) {
  auto label__ = label ? _fbb.CreateString(label) : 0;
  auto expanded_label__ = expanded_label ? _fbb.CreateString(expanded_label) : 0;
  return steamrot::CreateDropDownListData(
      _fbb,
      base_data,
      label__,
      expanded_label__,
      data_populate_function);
}

struct DropDownItemData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DropDownItemDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE_DATA = 4,
    VT_LABEL = 6
  };
  const steamrot::UIElementData *base_data() const {
    return GetPointer<const steamrot::UIElementData *>(VT_BASE_DATA);
  }
  const ::flatbuffers::String *label() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LABEL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE_DATA) &&
           verifier.VerifyTable(base_data()) &&
           VerifyOffsetRequired(verifier, VT_LABEL) &&
           verifier.VerifyString(label()) &&
           verifier.EndTable();
  }
};

struct DropDownItemDataBuilder {
  typedef DropDownItemData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base_data(::flatbuffers::Offset<steamrot::UIElementData> base_data) {
    fbb_.AddOffset(DropDownItemData::VT_BASE_DATA, base_data);
  }
  void add_label(::flatbuffers::Offset<::flatbuffers::String> label) {
    fbb_.AddOffset(DropDownItemData::VT_LABEL, label);
  }
  explicit DropDownItemDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DropDownItemData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DropDownItemData>(end);
    fbb_.Required(o, DropDownItemData::VT_BASE_DATA);
    fbb_.Required(o, DropDownItemData::VT_LABEL);
    return o;
  }
};

inline ::flatbuffers::Offset<DropDownItemData> CreateDropDownItemData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> base_data = 0,
    ::flatbuffers::Offset<::flatbuffers::String> label = 0) {
  DropDownItemDataBuilder builder_(_fbb);
  builder_.add_label(label);
  builder_.add_base_data(base_data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DropDownItemData> CreateDropDownItemDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> base_data = 0,
    const char *label = nullptr) {
  auto label__ = label ? _fbb.CreateString(label) : 0;
  return steamrot::CreateDropDownItemData(
      _fbb,
      base_data,
      label__);
}

struct DropDownButtonData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DropDownButtonDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE_DATA = 4,
    VT_IS_EXPANDED = 6
  };
  const steamrot::UIElementData *base_data() const {
    return GetPointer<const steamrot::UIElementData *>(VT_BASE_DATA);
  }
  bool is_expanded() const {
    return GetField<uint8_t>(VT_IS_EXPANDED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_BASE_DATA) &&
           verifier.VerifyTable(base_data()) &&
           VerifyField<uint8_t>(verifier, VT_IS_EXPANDED, 1) &&
           verifier.EndTable();
  }
};

struct DropDownButtonDataBuilder {
  typedef DropDownButtonData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base_data(::flatbuffers::Offset<steamrot::UIElementData> base_data) {
    fbb_.AddOffset(DropDownButtonData::VT_BASE_DATA, base_data);
  }
  void add_is_expanded(bool is_expanded) {
    fbb_.AddElement<uint8_t>(DropDownButtonData::VT_IS_EXPANDED, static_cast<uint8_t>(is_expanded), 0);
  }
  explicit DropDownButtonDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DropDownButtonData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DropDownButtonData>(end);
    fbb_.Required(o, DropDownButtonData::VT_BASE_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<DropDownButtonData> CreateDropDownButtonData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::UIElementData> base_data = 0,
    bool is_expanded = false) {
  DropDownButtonDataBuilder builder_(_fbb);
  builder_.add_base_data(base_data);
  builder_.add_is_expanded(is_expanded);
  return builder_.Finish();
}

struct UserInterfaceData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UserInterfaceDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOT_UI_ELEMENT_TYPE = 4,
    VT_ROOT_UI_ELEMENT = 6,
    VT_UI_NAME = 8,
    VT_START_VISIBLE = 10
  };
  steamrot::UIElementDataUnion root_ui_element_type() const {
    return static_cast<steamrot::UIElementDataUnion>(GetField<uint8_t>(VT_ROOT_UI_ELEMENT_TYPE, 0));
  }
  const void *root_ui_element() const {
    return GetPointer<const void *>(VT_ROOT_UI_ELEMENT);
  }
  template<typename T> const T *root_ui_element_as() const;
  const steamrot::PanelData *root_ui_element_as_PanelData() const {
    return root_ui_element_type() == steamrot::UIElementDataUnion_PanelData ? static_cast<const steamrot::PanelData *>(root_ui_element()) : nullptr;
  }
  const steamrot::ButtonData *root_ui_element_as_ButtonData() const {
    return root_ui_element_type() == steamrot::UIElementDataUnion_ButtonData ? static_cast<const steamrot::ButtonData *>(root_ui_element()) : nullptr;
  }
  const steamrot::DropDownListData *root_ui_element_as_DropDownListData() const {
    return root_ui_element_type() == steamrot::UIElementDataUnion_DropDownListData ? static_cast<const steamrot::DropDownListData *>(root_ui_element()) : nullptr;
  }
  const steamrot::DropDownContainerData *root_ui_element_as_DropDownContainerData() const {
    return root_ui_element_type() == steamrot::UIElementDataUnion_DropDownContainerData ? static_cast<const steamrot::DropDownContainerData *>(root_ui_element()) : nullptr;
  }
  const steamrot::DropDownItemData *root_ui_element_as_DropDownItemData() const {
    return root_ui_element_type() == steamrot::UIElementDataUnion_DropDownItemData ? static_cast<const steamrot::DropDownItemData *>(root_ui_element()) : nullptr;
  }
  const steamrot::DropDownButtonData *root_ui_element_as_DropDownButtonData() const {
    return root_ui_element_type() == steamrot::UIElementDataUnion_DropDownButtonData ? static_cast<const steamrot::DropDownButtonData *>(root_ui_element()) : nullptr;
  }
  const ::flatbuffers::String *ui_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UI_NAME);
  }
  bool start_visible() const {
    return GetField<uint8_t>(VT_START_VISIBLE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ROOT_UI_ELEMENT_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_ROOT_UI_ELEMENT) &&
           VerifyUIElementDataUnion(verifier, root_ui_element(), root_ui_element_type()) &&
           VerifyOffset(verifier, VT_UI_NAME) &&
           verifier.VerifyString(ui_name()) &&
           VerifyField<uint8_t>(verifier, VT_START_VISIBLE, 1) &&
           verifier.EndTable();
  }
};

template<> inline const steamrot::PanelData *UserInterfaceData::root_ui_element_as<steamrot::PanelData>() const {
  return root_ui_element_as_PanelData();
}

template<> inline const steamrot::ButtonData *UserInterfaceData::root_ui_element_as<steamrot::ButtonData>() const {
  return root_ui_element_as_ButtonData();
}

template<> inline const steamrot::DropDownListData *UserInterfaceData::root_ui_element_as<steamrot::DropDownListData>() const {
  return root_ui_element_as_DropDownListData();
}

template<> inline const steamrot::DropDownContainerData *UserInterfaceData::root_ui_element_as<steamrot::DropDownContainerData>() const {
  return root_ui_element_as_DropDownContainerData();
}

template<> inline const steamrot::DropDownItemData *UserInterfaceData::root_ui_element_as<steamrot::DropDownItemData>() const {
  return root_ui_element_as_DropDownItemData();
}

template<> inline const steamrot::DropDownButtonData *UserInterfaceData::root_ui_element_as<steamrot::DropDownButtonData>() const {
  return root_ui_element_as_DropDownButtonData();
}

struct UserInterfaceDataBuilder {
  typedef UserInterfaceData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_root_ui_element_type(steamrot::UIElementDataUnion root_ui_element_type) {
    fbb_.AddElement<uint8_t>(UserInterfaceData::VT_ROOT_UI_ELEMENT_TYPE, static_cast<uint8_t>(root_ui_element_type), 0);
  }
  void add_root_ui_element(::flatbuffers::Offset<void> root_ui_element) {
    fbb_.AddOffset(UserInterfaceData::VT_ROOT_UI_ELEMENT, root_ui_element);
  }
  void add_ui_name(::flatbuffers::Offset<::flatbuffers::String> ui_name) {
    fbb_.AddOffset(UserInterfaceData::VT_UI_NAME, ui_name);
  }
  void add_start_visible(bool start_visible) {
    fbb_.AddElement<uint8_t>(UserInterfaceData::VT_START_VISIBLE, static_cast<uint8_t>(start_visible), 0);
  }
  explicit UserInterfaceDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UserInterfaceData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UserInterfaceData>(end);
    fbb_.Required(o, UserInterfaceData::VT_ROOT_UI_ELEMENT);
    return o;
  }
};

inline ::flatbuffers::Offset<UserInterfaceData> CreateUserInterfaceData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::UIElementDataUnion root_ui_element_type = steamrot::UIElementDataUnion_NONE,
    ::flatbuffers::Offset<void> root_ui_element = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ui_name = 0,
    bool start_visible = false) {
  UserInterfaceDataBuilder builder_(_fbb);
  builder_.add_ui_name(ui_name);
  builder_.add_root_ui_element(root_ui_element);
  builder_.add_start_visible(start_visible);
  builder_.add_root_ui_element_type(root_ui_element_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UserInterfaceData> CreateUserInterfaceDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::UIElementDataUnion root_ui_element_type = steamrot::UIElementDataUnion_NONE,
    ::flatbuffers::Offset<void> root_ui_element = 0,
    const char *ui_name = nullptr,
    bool start_visible = false) {
  auto ui_name__ = ui_name ? _fbb.CreateString(ui_name) : 0;
  return steamrot::CreateUserInterfaceData(
      _fbb,
      root_ui_element_type,
      root_ui_element,
      ui_name__,
      start_visible);
}

inline bool VerifyEventDataType(::flatbuffers::Verifier &verifier, const void *obj, EventDataType type) {
  switch (type) {
    case EventDataType_NONE: {
      return true;
    }
    case EventDataType_UserInputBitsetData: {
      auto ptr = reinterpret_cast<const steamrot::UserInputBitsetData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventDataType_SceneChangeData: {
      auto ptr = reinterpret_cast<const steamrot::SceneChangeDataFBS *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventDataType_UIElementName: {
      auto ptr = reinterpret_cast<const ::flatbuffers::String *>(obj);
      return verifier.VerifyString(ptr);
    }
    default: return true;
  }
}

inline bool VerifyEventDataTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyEventDataType(
        verifier,  values->Get(i), types->GetEnum<EventDataType>(i))) {
      return false;
    }
  }
  return true;
}

inline bool VerifyUIElementDataUnion(::flatbuffers::Verifier &verifier, const void *obj, UIElementDataUnion type) {
  switch (type) {
    case UIElementDataUnion_NONE: {
      return true;
    }
    case UIElementDataUnion_PanelData: {
      auto ptr = reinterpret_cast<const steamrot::PanelData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UIElementDataUnion_ButtonData: {
      auto ptr = reinterpret_cast<const steamrot::ButtonData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UIElementDataUnion_DropDownListData: {
      auto ptr = reinterpret_cast<const steamrot::DropDownListData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UIElementDataUnion_DropDownContainerData: {
      auto ptr = reinterpret_cast<const steamrot::DropDownContainerData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UIElementDataUnion_DropDownItemData: {
      auto ptr = reinterpret_cast<const steamrot::DropDownItemData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UIElementDataUnion_DropDownButtonData: {
      auto ptr = reinterpret_cast<const steamrot::DropDownButtonData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyUIElementDataUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyUIElementDataUnion(
        verifier,  values->Get(i), types->GetEnum<UIElementDataUnion>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_USERINTERFACE_STEAMROT_H_

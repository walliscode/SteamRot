// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMEENGINE_STEAMROT_H_
#define FLATBUFFERS_GENERATED_GAMEENGINE_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "subscriber_config_generated.h"

namespace steamrot {

struct GameEngineData;
struct GameEngineDataBuilder;

struct GameEngineData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameEngineDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUBSCRIPTIONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::SubscriberData>> *subscriptions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::SubscriberData>> *>(VT_SUBSCRIPTIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SUBSCRIPTIONS) &&
           verifier.VerifyVector(subscriptions()) &&
           verifier.VerifyVectorOfTables(subscriptions()) &&
           verifier.EndTable();
  }
};

struct GameEngineDataBuilder {
  typedef GameEngineData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_subscriptions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::SubscriberData>>> subscriptions) {
    fbb_.AddOffset(GameEngineData::VT_SUBSCRIPTIONS, subscriptions);
  }
  explicit GameEngineDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameEngineData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameEngineData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameEngineData> CreateGameEngineData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::SubscriberData>>> subscriptions = 0) {
  GameEngineDataBuilder builder_(_fbb);
  builder_.add_subscriptions(subscriptions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GameEngineData> CreateGameEngineDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<steamrot::SubscriberData>> *subscriptions = nullptr) {
  auto subscriptions__ = subscriptions ? _fbb.CreateVector<::flatbuffers::Offset<steamrot::SubscriberData>>(*subscriptions) : 0;
  return steamrot::CreateGameEngineData(
      _fbb,
      subscriptions__);
}

inline const steamrot::GameEngineData *GetGameEngineData(const void *buf) {
  return ::flatbuffers::GetRoot<steamrot::GameEngineData>(buf);
}

inline const steamrot::GameEngineData *GetSizePrefixedGameEngineData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<steamrot::GameEngineData>(buf);
}

inline bool VerifyGameEngineDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<steamrot::GameEngineData>(nullptr);
}

inline bool VerifySizePrefixedGameEngineDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<steamrot::GameEngineData>(nullptr);
}

inline void FinishGameEngineDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::GameEngineData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameEngineDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::GameEngineData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_GAMEENGINE_STEAMROT_H_

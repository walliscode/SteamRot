// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USERINPUT_STEAMROT_H_
#define FLATBUFFERS_GENERATED_USERINPUT_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace steamrot {

struct UserInputBitsetData;
struct UserInputBitsetDataBuilder;

enum KeyboardInput : uint8_t {
  KeyboardInput_A = 0,
  KeyboardInput_B = 1,
  KeyboardInput_C = 2,
  KeyboardInput_D = 3,
  KeyboardInput_E = 4,
  KeyboardInput_F = 5,
  KeyboardInput_G = 6,
  KeyboardInput_H = 7,
  KeyboardInput_I = 8,
  KeyboardInput_J = 9,
  KeyboardInput_K = 10,
  KeyboardInput_L = 11,
  KeyboardInput_M = 12,
  KeyboardInput_N = 13,
  KeyboardInput_O = 14,
  KeyboardInput_P = 15,
  KeyboardInput_Q = 16,
  KeyboardInput_R = 17,
  KeyboardInput_S = 18,
  KeyboardInput_T = 19,
  KeyboardInput_U = 20,
  KeyboardInput_V = 21,
  KeyboardInput_W = 22,
  KeyboardInput_X = 23,
  KeyboardInput_Y = 24,
  KeyboardInput_Z = 25,
  KeyboardInput_MIN = KeyboardInput_A,
  KeyboardInput_MAX = KeyboardInput_Z
};

inline const KeyboardInput (&EnumValuesKeyboardInput())[26] {
  static const KeyboardInput values[] = {
    KeyboardInput_A,
    KeyboardInput_B,
    KeyboardInput_C,
    KeyboardInput_D,
    KeyboardInput_E,
    KeyboardInput_F,
    KeyboardInput_G,
    KeyboardInput_H,
    KeyboardInput_I,
    KeyboardInput_J,
    KeyboardInput_K,
    KeyboardInput_L,
    KeyboardInput_M,
    KeyboardInput_N,
    KeyboardInput_O,
    KeyboardInput_P,
    KeyboardInput_Q,
    KeyboardInput_R,
    KeyboardInput_S,
    KeyboardInput_T,
    KeyboardInput_U,
    KeyboardInput_V,
    KeyboardInput_W,
    KeyboardInput_X,
    KeyboardInput_Y,
    KeyboardInput_Z
  };
  return values;
}

inline const char * const *EnumNamesKeyboardInput() {
  static const char * const names[27] = {
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    nullptr
  };
  return names;
}

inline const char *EnumNameKeyboardInput(KeyboardInput e) {
  if (::flatbuffers::IsOutRange(e, KeyboardInput_A, KeyboardInput_Z)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesKeyboardInput()[index];
}

enum MouseInput : uint8_t {
  MouseInput_LEFT_CLICK = 0,
  MouseInput_RIGHT_CLICK = 1,
  MouseInput_MIDDLE_CLICK = 2,
  MouseInput_SCROLL_UP = 3,
  MouseInput_SCROLL_DOWN = 4,
  MouseInput_MIN = MouseInput_LEFT_CLICK,
  MouseInput_MAX = MouseInput_SCROLL_DOWN
};

inline const MouseInput (&EnumValuesMouseInput())[5] {
  static const MouseInput values[] = {
    MouseInput_LEFT_CLICK,
    MouseInput_RIGHT_CLICK,
    MouseInput_MIDDLE_CLICK,
    MouseInput_SCROLL_UP,
    MouseInput_SCROLL_DOWN
  };
  return values;
}

inline const char * const *EnumNamesMouseInput() {
  static const char * const names[6] = {
    "LEFT_CLICK",
    "RIGHT_CLICK",
    "MIDDLE_CLICK",
    "SCROLL_UP",
    "SCROLL_DOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameMouseInput(MouseInput e) {
  if (::flatbuffers::IsOutRange(e, MouseInput_LEFT_CLICK, MouseInput_SCROLL_DOWN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMouseInput()[index];
}

struct UserInputBitsetData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UserInputBitsetDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEYBOARD_PRESSED = 4,
    VT_KEYBOARD_RELEASED = 6,
    VT_MOUSE_PRESSED = 8,
    VT_MOUSE_RELEASED = 10
  };
  const ::flatbuffers::Vector<uint8_t> *keyboard_pressed() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_KEYBOARD_PRESSED);
  }
  const ::flatbuffers::Vector<uint8_t> *keyboard_released() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_KEYBOARD_RELEASED);
  }
  const ::flatbuffers::Vector<uint8_t> *mouse_pressed() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_MOUSE_PRESSED);
  }
  const ::flatbuffers::Vector<uint8_t> *mouse_released() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_MOUSE_RELEASED);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEYBOARD_PRESSED) &&
           verifier.VerifyVector(keyboard_pressed()) &&
           VerifyOffset(verifier, VT_KEYBOARD_RELEASED) &&
           verifier.VerifyVector(keyboard_released()) &&
           VerifyOffset(verifier, VT_MOUSE_PRESSED) &&
           verifier.VerifyVector(mouse_pressed()) &&
           VerifyOffset(verifier, VT_MOUSE_RELEASED) &&
           verifier.VerifyVector(mouse_released()) &&
           verifier.EndTable();
  }
};

struct UserInputBitsetDataBuilder {
  typedef UserInputBitsetData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_keyboard_pressed(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> keyboard_pressed) {
    fbb_.AddOffset(UserInputBitsetData::VT_KEYBOARD_PRESSED, keyboard_pressed);
  }
  void add_keyboard_released(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> keyboard_released) {
    fbb_.AddOffset(UserInputBitsetData::VT_KEYBOARD_RELEASED, keyboard_released);
  }
  void add_mouse_pressed(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> mouse_pressed) {
    fbb_.AddOffset(UserInputBitsetData::VT_MOUSE_PRESSED, mouse_pressed);
  }
  void add_mouse_released(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> mouse_released) {
    fbb_.AddOffset(UserInputBitsetData::VT_MOUSE_RELEASED, mouse_released);
  }
  explicit UserInputBitsetDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UserInputBitsetData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UserInputBitsetData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UserInputBitsetData> CreateUserInputBitsetData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> keyboard_pressed = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> keyboard_released = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> mouse_pressed = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> mouse_released = 0) {
  UserInputBitsetDataBuilder builder_(_fbb);
  builder_.add_mouse_released(mouse_released);
  builder_.add_mouse_pressed(mouse_pressed);
  builder_.add_keyboard_released(keyboard_released);
  builder_.add_keyboard_pressed(keyboard_pressed);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UserInputBitsetData> CreateUserInputBitsetDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *keyboard_pressed = nullptr,
    const std::vector<uint8_t> *keyboard_released = nullptr,
    const std::vector<uint8_t> *mouse_pressed = nullptr,
    const std::vector<uint8_t> *mouse_released = nullptr) {
  auto keyboard_pressed__ = keyboard_pressed ? _fbb.CreateVector<uint8_t>(*keyboard_pressed) : 0;
  auto keyboard_released__ = keyboard_released ? _fbb.CreateVector<uint8_t>(*keyboard_released) : 0;
  auto mouse_pressed__ = mouse_pressed ? _fbb.CreateVector<uint8_t>(*mouse_pressed) : 0;
  auto mouse_released__ = mouse_released ? _fbb.CreateVector<uint8_t>(*mouse_released) : 0;
  return steamrot::CreateUserInputBitsetData(
      _fbb,
      keyboard_pressed__,
      keyboard_released__,
      mouse_pressed__,
      mouse_released__);
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_USERINPUT_STEAMROT_H_

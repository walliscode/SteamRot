// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITIES_STEAMROT_H_
#define FLATBUFFERS_GENERATED_ENTITIES_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "grimoire_machina_generated.h"
#include "user_interface_generated.h"

namespace steamrot {

struct EntityData;
struct EntityDataBuilder;

struct EntityCollection;
struct EntityCollectionBuilder;

struct EntityData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDEX = 4,
    VT_C_USER_INTERFACE = 6,
    VT_C_GRIMOIRE_MACHINA = 8
  };
  uint32_t index() const {
    return GetField<uint32_t>(VT_INDEX, 0);
  }
  const steamrot::UserInterface *c_user_interface() const {
    return GetPointer<const steamrot::UserInterface *>(VT_C_USER_INTERFACE);
  }
  const steamrot::GrimoireMachina *c_grimoire_machina() const {
    return GetPointer<const steamrot::GrimoireMachina *>(VT_C_GRIMOIRE_MACHINA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_INDEX, 4) &&
           VerifyOffset(verifier, VT_C_USER_INTERFACE) &&
           verifier.VerifyTable(c_user_interface()) &&
           VerifyOffset(verifier, VT_C_GRIMOIRE_MACHINA) &&
           verifier.VerifyTable(c_grimoire_machina()) &&
           verifier.EndTable();
  }
};

struct EntityDataBuilder {
  typedef EntityData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_index(uint32_t index) {
    fbb_.AddElement<uint32_t>(EntityData::VT_INDEX, index, 0);
  }
  void add_c_user_interface(::flatbuffers::Offset<steamrot::UserInterface> c_user_interface) {
    fbb_.AddOffset(EntityData::VT_C_USER_INTERFACE, c_user_interface);
  }
  void add_c_grimoire_machina(::flatbuffers::Offset<steamrot::GrimoireMachina> c_grimoire_machina) {
    fbb_.AddOffset(EntityData::VT_C_GRIMOIRE_MACHINA, c_grimoire_machina);
  }
  explicit EntityDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EntityData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EntityData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EntityData> CreateEntityData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t index = 0,
    ::flatbuffers::Offset<steamrot::UserInterface> c_user_interface = 0,
    ::flatbuffers::Offset<steamrot::GrimoireMachina> c_grimoire_machina = 0) {
  EntityDataBuilder builder_(_fbb);
  builder_.add_c_grimoire_machina(c_grimoire_machina);
  builder_.add_c_user_interface(c_user_interface);
  builder_.add_index(index);
  return builder_.Finish();
}

struct EntityCollection FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityCollectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITIES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::EntityData>> *entities() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::EntityData>> *>(VT_ENTITIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyVector(entities()) &&
           verifier.VerifyVectorOfTables(entities()) &&
           verifier.EndTable();
  }
};

struct EntityCollectionBuilder {
  typedef EntityCollection Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_entities(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::EntityData>>> entities) {
    fbb_.AddOffset(EntityCollection::VT_ENTITIES, entities);
  }
  explicit EntityCollectionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EntityCollection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EntityCollection>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EntityCollection> CreateEntityCollection(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::EntityData>>> entities = 0) {
  EntityCollectionBuilder builder_(_fbb);
  builder_.add_entities(entities);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EntityCollection> CreateEntityCollectionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<steamrot::EntityData>> *entities = nullptr) {
  auto entities__ = entities ? _fbb.CreateVector<::flatbuffers::Offset<steamrot::EntityData>>(*entities) : 0;
  return steamrot::CreateEntityCollection(
      _fbb,
      entities__);
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_ENTITIES_STEAMROT_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITIES_STEAMROT_H_
#define FLATBUFFERS_GENERATED_ENTITIES_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "user_interface_generated.h"

namespace steamrot {

struct Entity;
struct EntityBuilder;

struct EntitiesData;
struct EntitiesDataBuilder;

struct Entity FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDEX = 4,
    VT_C_USER_INTERFACE = 6
  };
  uint32_t index() const {
    return GetField<uint32_t>(VT_INDEX, 0);
  }
  const steamrot::UserInterface *c_user_interface() const {
    return GetPointer<const steamrot::UserInterface *>(VT_C_USER_INTERFACE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_INDEX, 4) &&
           VerifyOffset(verifier, VT_C_USER_INTERFACE) &&
           verifier.VerifyTable(c_user_interface()) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_index(uint32_t index) {
    fbb_.AddElement<uint32_t>(Entity::VT_INDEX, index, 0);
  }
  void add_c_user_interface(::flatbuffers::Offset<steamrot::UserInterface> c_user_interface) {
    fbb_.AddOffset(Entity::VT_C_USER_INTERFACE, c_user_interface);
  }
  explicit EntityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Entity> CreateEntity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t index = 0,
    ::flatbuffers::Offset<steamrot::UserInterface> c_user_interface = 0) {
  EntityBuilder builder_(_fbb);
  builder_.add_c_user_interface(c_user_interface);
  builder_.add_index(index);
  return builder_.Finish();
}

struct EntitiesData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntitiesDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITIES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::Entity>> *entities() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::Entity>> *>(VT_ENTITIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyVector(entities()) &&
           verifier.VerifyVectorOfTables(entities()) &&
           verifier.EndTable();
  }
};

struct EntitiesDataBuilder {
  typedef EntitiesData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_entities(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::Entity>>> entities) {
    fbb_.AddOffset(EntitiesData::VT_ENTITIES, entities);
  }
  explicit EntitiesDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EntitiesData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EntitiesData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EntitiesData> CreateEntitiesData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::Entity>>> entities = 0) {
  EntitiesDataBuilder builder_(_fbb);
  builder_.add_entities(entities);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EntitiesData> CreateEntitiesDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<steamrot::Entity>> *entities = nullptr) {
  auto entities__ = entities ? _fbb.CreateVector<::flatbuffers::Offset<steamrot::Entity>>(*entities) : 0;
  return steamrot::CreateEntitiesData(
      _fbb,
      entities__);
}

inline const steamrot::EntitiesData *GetEntitiesData(const void *buf) {
  return ::flatbuffers::GetRoot<steamrot::EntitiesData>(buf);
}

inline const steamrot::EntitiesData *GetSizePrefixedEntitiesData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<steamrot::EntitiesData>(buf);
}

inline bool VerifyEntitiesDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<steamrot::EntitiesData>(nullptr);
}

inline bool VerifySizePrefixedEntitiesDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<steamrot::EntitiesData>(nullptr);
}

inline void FinishEntitiesDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::EntitiesData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEntitiesDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::EntitiesData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_ENTITIES_STEAMROT_H_

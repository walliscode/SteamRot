// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGICS_STEAMROT_H_
#define FLATBUFFERS_GENERATED_LOGICS_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace steamrot {

struct LogicCollection;
struct LogicCollectionBuilder;

enum LogicType : uint8_t {
  LogicType_None = 0,
  LogicType_Render = 1,
  LogicType_Collision = 2,
  LogicType_Event = 3,
  LogicType_MIN = LogicType_None,
  LogicType_MAX = LogicType_Event
};

inline const LogicType (&EnumValuesLogicType())[4] {
  static const LogicType values[] = {
    LogicType_None,
    LogicType_Render,
    LogicType_Collision,
    LogicType_Event
  };
  return values;
}

inline const char * const *EnumNamesLogicType() {
  static const char * const names[5] = {
    "None",
    "Render",
    "Collision",
    "Event",
    nullptr
  };
  return names;
}

inline const char *EnumNameLogicType(LogicType e) {
  if (::flatbuffers::IsOutRange(e, LogicType_None, LogicType_Event)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLogicType()[index];
}

struct LogicCollection FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogicCollectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPES = 4
  };
  const ::flatbuffers::Vector<uint8_t> *types() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_TYPES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPES) &&
           verifier.VerifyVector(types()) &&
           verifier.EndTable();
  }
};

struct LogicCollectionBuilder {
  typedef LogicCollection Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_types(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> types) {
    fbb_.AddOffset(LogicCollection::VT_TYPES, types);
  }
  explicit LogicCollectionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LogicCollection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogicCollection>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LogicCollection> CreateLogicCollection(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> types = 0) {
  LogicCollectionBuilder builder_(_fbb);
  builder_.add_types(types);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LogicCollection> CreateLogicCollectionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *types = nullptr) {
  auto types__ = types ? _fbb.CreateVector<uint8_t>(*types) : 0;
  return steamrot::CreateLogicCollection(
      _fbb,
      types__);
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_LOGICS_STEAMROT_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TYPES_H_
#define FLATBUFFERS_GENERATED_TYPES_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

struct Vector2fData;
struct Vector2fDataBuilder;

struct ColorData;

struct Vertex;
struct VertexBuilder;

struct Triangle;
struct TriangleBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) ColorData FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t r_;
  uint8_t g_;
  uint8_t b_;
  uint8_t a_;

 public:
  ColorData()
      : r_(0),
        g_(0),
        b_(0),
        a_(0) {
  }
  ColorData(uint8_t _r, uint8_t _g, uint8_t _b, uint8_t _a)
      : r_(::flatbuffers::EndianScalar(_r)),
        g_(::flatbuffers::EndianScalar(_g)),
        b_(::flatbuffers::EndianScalar(_b)),
        a_(::flatbuffers::EndianScalar(_a)) {
  }
  uint8_t r() const {
    return ::flatbuffers::EndianScalar(r_);
  }
  uint8_t g() const {
    return ::flatbuffers::EndianScalar(g_);
  }
  uint8_t b() const {
    return ::flatbuffers::EndianScalar(b_);
  }
  uint8_t a() const {
    return ::flatbuffers::EndianScalar(a_);
  }
};
FLATBUFFERS_STRUCT_END(ColorData, 4);

struct Vector2fData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vector2fDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct Vector2fDataBuilder {
  typedef Vector2fData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Vector2fData::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Vector2fData::VT_Y, y, 0.0f);
  }
  explicit Vector2fDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vector2fData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vector2fData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vector2fData> CreateVector2fData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f) {
  Vector2fDataBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct Vertex FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VertexBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_COLOR = 6
  };
  const Vector2fData *position() const {
    return GetPointer<const Vector2fData *>(VT_POSITION);
  }
  const ColorData *color() const {
    return GetStruct<const ColorData *>(VT_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyFieldRequired<ColorData>(verifier, VT_COLOR, 1) &&
           verifier.EndTable();
  }
};

struct VertexBuilder {
  typedef Vertex Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(::flatbuffers::Offset<Vector2fData> position) {
    fbb_.AddOffset(Vertex::VT_POSITION, position);
  }
  void add_color(const ColorData *color) {
    fbb_.AddStruct(Vertex::VT_COLOR, color);
  }
  explicit VertexBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vertex> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vertex>(end);
    fbb_.Required(o, Vertex::VT_POSITION);
    fbb_.Required(o, Vertex::VT_COLOR);
    return o;
  }
};

inline ::flatbuffers::Offset<Vertex> CreateVertex(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Vector2fData> position = 0,
    const ColorData *color = nullptr) {
  VertexBuilder builder_(_fbb);
  builder_.add_color(color);
  builder_.add_position(position);
  return builder_.Finish();
}

struct Triangle FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TriangleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Vertex>> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Vertex>> *>(VT_VERTICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           verifier.VerifyVectorOfTables(vertices()) &&
           verifier.EndTable();
  }
};

struct TriangleBuilder {
  typedef Triangle Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Vertex>>> vertices) {
    fbb_.AddOffset(Triangle::VT_VERTICES, vertices);
  }
  explicit TriangleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Triangle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Triangle>(end);
    fbb_.Required(o, Triangle::VT_VERTICES);
    return o;
  }
};

inline ::flatbuffers::Offset<Triangle> CreateTriangle(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Vertex>>> vertices = 0) {
  TriangleBuilder builder_(_fbb);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Triangle> CreateTriangleDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Vertex>> *vertices = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVector<::flatbuffers::Offset<Vertex>>(*vertices) : 0;
  return CreateTriangle(
      _fbb,
      vertices__);
}

#endif  // FLATBUFFERS_GENERATED_TYPES_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FRAGMENTS_STEAMROT_H_
#define FLATBUFFERS_GENERATED_FRAGMENTS_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "types_generated.h"

namespace steamrot {

struct View;
struct ViewBuilder;

struct SocketData;
struct SocketDataBuilder;

struct RenderOverlayData;
struct RenderOverlayDataBuilder;

struct FragmentData;
struct FragmentDataBuilder;

enum ViewDirection : uint8_t {
  ViewDirection_NONE = 0,
  ViewDirection_FRONT = 1,
  ViewDirection_MIN = ViewDirection_NONE,
  ViewDirection_MAX = ViewDirection_FRONT
};

inline const ViewDirection (&EnumValuesViewDirection())[2] {
  static const ViewDirection values[] = {
    ViewDirection_NONE,
    ViewDirection_FRONT
  };
  return values;
}

inline const char * const *EnumNamesViewDirection() {
  static const char * const names[3] = {
    "NONE",
    "FRONT",
    nullptr
  };
  return names;
}

inline const char *EnumNameViewDirection(ViewDirection e) {
  if (::flatbuffers::IsOutRange(e, ViewDirection_NONE, ViewDirection_FRONT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesViewDirection()[index];
}

struct View FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ViewBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRIANGLES = 4,
    VT_DIRECTION = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Triangle>> *triangles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Triangle>> *>(VT_TRIANGLES);
  }
  steamrot::ViewDirection direction() const {
    return static_cast<steamrot::ViewDirection>(GetField<uint8_t>(VT_DIRECTION, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_TRIANGLES) &&
           verifier.VerifyVector(triangles()) &&
           verifier.VerifyVectorOfTables(triangles()) &&
           VerifyField<uint8_t>(verifier, VT_DIRECTION, 1) &&
           verifier.EndTable();
  }
};

struct ViewBuilder {
  typedef View Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_triangles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Triangle>>> triangles) {
    fbb_.AddOffset(View::VT_TRIANGLES, triangles);
  }
  void add_direction(steamrot::ViewDirection direction) {
    fbb_.AddElement<uint8_t>(View::VT_DIRECTION, static_cast<uint8_t>(direction), 0);
  }
  explicit ViewBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<View> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<View>(end);
    fbb_.Required(o, View::VT_TRIANGLES);
    return o;
  }
};

inline ::flatbuffers::Offset<View> CreateView(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Triangle>>> triangles = 0,
    steamrot::ViewDirection direction = steamrot::ViewDirection_NONE) {
  ViewBuilder builder_(_fbb);
  builder_.add_triangles(triangles);
  builder_.add_direction(direction);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<View> CreateViewDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Triangle>> *triangles = nullptr,
    steamrot::ViewDirection direction = steamrot::ViewDirection_NONE) {
  auto triangles__ = triangles ? _fbb.CreateVector<::flatbuffers::Offset<Triangle>>(*triangles) : 0;
  return steamrot::CreateView(
      _fbb,
      triangles__,
      direction);
}

struct SocketData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SocketDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Vector2f>> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Vector2f>> *>(VT_VERTICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           verifier.VerifyVectorOfTables(vertices()) &&
           verifier.EndTable();
  }
};

struct SocketDataBuilder {
  typedef SocketData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Vector2f>>> vertices) {
    fbb_.AddOffset(SocketData::VT_VERTICES, vertices);
  }
  explicit SocketDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SocketData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SocketData>(end);
    fbb_.Required(o, SocketData::VT_VERTICES);
    return o;
  }
};

inline ::flatbuffers::Offset<SocketData> CreateSocketData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Vector2f>>> vertices = 0) {
  SocketDataBuilder builder_(_fbb);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SocketData> CreateSocketDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Vector2f>> *vertices = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVector<::flatbuffers::Offset<Vector2f>>(*vertices) : 0;
  return steamrot::CreateSocketData(
      _fbb,
      vertices__);
}

struct RenderOverlayData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RenderOverlayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VIEWS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::View>> *views() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::View>> *>(VT_VIEWS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VIEWS) &&
           verifier.VerifyVector(views()) &&
           verifier.VerifyVectorOfTables(views()) &&
           verifier.EndTable();
  }
};

struct RenderOverlayDataBuilder {
  typedef RenderOverlayData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_views(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::View>>> views) {
    fbb_.AddOffset(RenderOverlayData::VT_VIEWS, views);
  }
  explicit RenderOverlayDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RenderOverlayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RenderOverlayData>(end);
    fbb_.Required(o, RenderOverlayData::VT_VIEWS);
    return o;
  }
};

inline ::flatbuffers::Offset<RenderOverlayData> CreateRenderOverlayData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::View>>> views = 0) {
  RenderOverlayDataBuilder builder_(_fbb);
  builder_.add_views(views);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RenderOverlayData> CreateRenderOverlayDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<steamrot::View>> *views = nullptr) {
  auto views__ = views ? _fbb.CreateVector<::flatbuffers::Offset<steamrot::View>>(*views) : 0;
  return steamrot::CreateRenderOverlayData(
      _fbb,
      views__);
}

struct FragmentData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FragmentDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SOCKET_DATA = 6,
    VT_RENDER_OVERLAY_DATA = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const steamrot::SocketData *socket_data() const {
    return GetPointer<const steamrot::SocketData *>(VT_SOCKET_DATA);
  }
  const steamrot::RenderOverlayData *render_overlay_data() const {
    return GetPointer<const steamrot::RenderOverlayData *>(VT_RENDER_OVERLAY_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_SOCKET_DATA) &&
           verifier.VerifyTable(socket_data()) &&
           VerifyOffsetRequired(verifier, VT_RENDER_OVERLAY_DATA) &&
           verifier.VerifyTable(render_overlay_data()) &&
           verifier.EndTable();
  }
};

struct FragmentDataBuilder {
  typedef FragmentData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(FragmentData::VT_NAME, name);
  }
  void add_socket_data(::flatbuffers::Offset<steamrot::SocketData> socket_data) {
    fbb_.AddOffset(FragmentData::VT_SOCKET_DATA, socket_data);
  }
  void add_render_overlay_data(::flatbuffers::Offset<steamrot::RenderOverlayData> render_overlay_data) {
    fbb_.AddOffset(FragmentData::VT_RENDER_OVERLAY_DATA, render_overlay_data);
  }
  explicit FragmentDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FragmentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FragmentData>(end);
    fbb_.Required(o, FragmentData::VT_NAME);
    fbb_.Required(o, FragmentData::VT_SOCKET_DATA);
    fbb_.Required(o, FragmentData::VT_RENDER_OVERLAY_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<FragmentData> CreateFragmentData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<steamrot::SocketData> socket_data = 0,
    ::flatbuffers::Offset<steamrot::RenderOverlayData> render_overlay_data = 0) {
  FragmentDataBuilder builder_(_fbb);
  builder_.add_render_overlay_data(render_overlay_data);
  builder_.add_socket_data(socket_data);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FragmentData> CreateFragmentDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    ::flatbuffers::Offset<steamrot::SocketData> socket_data = 0,
    ::flatbuffers::Offset<steamrot::RenderOverlayData> render_overlay_data = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return steamrot::CreateFragmentData(
      _fbb,
      name__,
      socket_data,
      render_overlay_data);
}

inline const steamrot::FragmentData *GetFragmentData(const void *buf) {
  return ::flatbuffers::GetRoot<steamrot::FragmentData>(buf);
}

inline const steamrot::FragmentData *GetSizePrefixedFragmentData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<steamrot::FragmentData>(buf);
}

inline bool VerifyFragmentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<steamrot::FragmentData>(nullptr);
}

inline bool VerifySizePrefixedFragmentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<steamrot::FragmentData>(nullptr);
}

inline void FinishFragmentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::FragmentData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFragmentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::FragmentData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_FRAGMENTS_STEAMROT_H_

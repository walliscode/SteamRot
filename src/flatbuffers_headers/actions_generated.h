// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ACTIONS_STEAMROT_H_
#define FLATBUFFERS_GENERATED_ACTIONS_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace steamrot {

struct Key;
struct KeyBuilder;

struct MouseButton;
struct MouseButtonBuilder;

struct ActionPart;
struct ActionPartBuilder;

struct Action;
struct ActionBuilder;

struct ActionsData;
struct ActionsDataBuilder;

enum InputType : uint8_t {
  InputType_Keyboard = 0,
  InputType_Mouse = 1,
  InputType_MIN = InputType_Keyboard,
  InputType_MAX = InputType_Mouse
};

inline const InputType (&EnumValuesInputType())[2] {
  static const InputType values[] = {
    InputType_Keyboard,
    InputType_Mouse
  };
  return values;
}

inline const char * const *EnumNamesInputType() {
  static const char * const names[3] = {
    "Keyboard",
    "Mouse",
    nullptr
  };
  return names;
}

inline const char *EnumNameInputType(InputType e) {
  if (::flatbuffers::IsOutRange(e, InputType_Keyboard, InputType_Mouse)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesInputType()[index];
}

enum Input : uint8_t {
  Input_NONE = 0,
  Input_Key = 1,
  Input_MouseButton = 2,
  Input_MIN = Input_NONE,
  Input_MAX = Input_MouseButton
};

inline const Input (&EnumValuesInput())[3] {
  static const Input values[] = {
    Input_NONE,
    Input_Key,
    Input_MouseButton
  };
  return values;
}

inline const char * const *EnumNamesInput() {
  static const char * const names[4] = {
    "NONE",
    "Key",
    "MouseButton",
    nullptr
  };
  return names;
}

inline const char *EnumNameInput(Input e) {
  if (::flatbuffers::IsOutRange(e, Input_NONE, Input_MouseButton)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesInput()[index];
}

template<typename T> struct InputTraits {
  static const Input enum_value = Input_NONE;
};

template<> struct InputTraits<steamrot::Key> {
  static const Input enum_value = Input_Key;
};

template<> struct InputTraits<steamrot::MouseButton> {
  static const Input enum_value = Input_MouseButton;
};

bool VerifyInput(::flatbuffers::Verifier &verifier, const void *obj, Input type);
bool VerifyInputVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Key FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KeyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct KeyBuilder {
  typedef Key Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Key::VT_NAME, name);
  }
  explicit KeyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Key> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Key>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Key> CreateKey(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  KeyBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Key> CreateKeyDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return steamrot::CreateKey(
      _fbb,
      name__);
}

struct MouseButton FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MouseButtonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct MouseButtonBuilder {
  typedef MouseButton Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(MouseButton::VT_NAME, name);
  }
  explicit MouseButtonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MouseButton> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MouseButton>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MouseButton> CreateMouseButton(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  MouseButtonBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MouseButton> CreateMouseButtonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return steamrot::CreateMouseButton(
      _fbb,
      name__);
}

struct ActionPart FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ActionPartBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_INPUT_TYPE = 6,
    VT_INPUT = 8
  };
  steamrot::InputType type() const {
    return static_cast<steamrot::InputType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  steamrot::Input input_type() const {
    return static_cast<steamrot::Input>(GetField<uint8_t>(VT_INPUT_TYPE, 0));
  }
  const void *input() const {
    return GetPointer<const void *>(VT_INPUT);
  }
  template<typename T> const T *input_as() const;
  const steamrot::Key *input_as_Key() const {
    return input_type() == steamrot::Input_Key ? static_cast<const steamrot::Key *>(input()) : nullptr;
  }
  const steamrot::MouseButton *input_as_MouseButton() const {
    return input_type() == steamrot::Input_MouseButton ? static_cast<const steamrot::MouseButton *>(input()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_INPUT_TYPE, 1) &&
           VerifyOffset(verifier, VT_INPUT) &&
           VerifyInput(verifier, input(), input_type()) &&
           verifier.EndTable();
  }
};

template<> inline const steamrot::Key *ActionPart::input_as<steamrot::Key>() const {
  return input_as_Key();
}

template<> inline const steamrot::MouseButton *ActionPart::input_as<steamrot::MouseButton>() const {
  return input_as_MouseButton();
}

struct ActionPartBuilder {
  typedef ActionPart Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(steamrot::InputType type) {
    fbb_.AddElement<uint8_t>(ActionPart::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_input_type(steamrot::Input input_type) {
    fbb_.AddElement<uint8_t>(ActionPart::VT_INPUT_TYPE, static_cast<uint8_t>(input_type), 0);
  }
  void add_input(::flatbuffers::Offset<void> input) {
    fbb_.AddOffset(ActionPart::VT_INPUT, input);
  }
  explicit ActionPartBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ActionPart> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ActionPart>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ActionPart> CreateActionPart(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    steamrot::InputType type = steamrot::InputType_Keyboard,
    steamrot::Input input_type = steamrot::Input_NONE,
    ::flatbuffers::Offset<void> input = 0) {
  ActionPartBuilder builder_(_fbb);
  builder_.add_input(input);
  builder_.add_input_type(input_type);
  builder_.add_type(type);
  return builder_.Finish();
}

struct Action FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ActionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PARTS = 4,
    VT_NAME = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::ActionPart>> *parts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::ActionPart>> *>(VT_PARTS);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PARTS) &&
           verifier.VerifyVector(parts()) &&
           verifier.VerifyVectorOfTables(parts()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct ActionBuilder {
  typedef Action Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_parts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::ActionPart>>> parts) {
    fbb_.AddOffset(Action::VT_PARTS, parts);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Action::VT_NAME, name);
  }
  explicit ActionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Action> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Action>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Action> CreateAction(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::ActionPart>>> parts = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  ActionBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_parts(parts);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Action> CreateActionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<steamrot::ActionPart>> *parts = nullptr,
    const char *name = nullptr) {
  auto parts__ = parts ? _fbb.CreateVector<::flatbuffers::Offset<steamrot::ActionPart>>(*parts) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return steamrot::CreateAction(
      _fbb,
      parts__,
      name__);
}

struct ActionsData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ActionsDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTIONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::Action>> *actions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::Action>> *>(VT_ACTIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTIONS) &&
           verifier.VerifyVector(actions()) &&
           verifier.VerifyVectorOfTables(actions()) &&
           verifier.EndTable();
  }
};

struct ActionsDataBuilder {
  typedef ActionsData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_actions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::Action>>> actions) {
    fbb_.AddOffset(ActionsData::VT_ACTIONS, actions);
  }
  explicit ActionsDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ActionsData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ActionsData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ActionsData> CreateActionsData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::Action>>> actions = 0) {
  ActionsDataBuilder builder_(_fbb);
  builder_.add_actions(actions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ActionsData> CreateActionsDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<steamrot::Action>> *actions = nullptr) {
  auto actions__ = actions ? _fbb.CreateVector<::flatbuffers::Offset<steamrot::Action>>(*actions) : 0;
  return steamrot::CreateActionsData(
      _fbb,
      actions__);
}

inline bool VerifyInput(::flatbuffers::Verifier &verifier, const void *obj, Input type) {
  switch (type) {
    case Input_NONE: {
      return true;
    }
    case Input_Key: {
      auto ptr = reinterpret_cast<const steamrot::Key *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Input_MouseButton: {
      auto ptr = reinterpret_cast<const steamrot::MouseButton *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyInputVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyInput(
        verifier,  values->Get(i), types->GetEnum<Input>(i))) {
      return false;
    }
  }
  return true;
}

inline const steamrot::ActionsData *GetActionsData(const void *buf) {
  return ::flatbuffers::GetRoot<steamrot::ActionsData>(buf);
}

inline const steamrot::ActionsData *GetSizePrefixedActionsData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<steamrot::ActionsData>(buf);
}

inline bool VerifyActionsDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<steamrot::ActionsData>(nullptr);
}

inline bool VerifySizePrefixedActionsDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<steamrot::ActionsData>(nullptr);
}

inline void FinishActionsDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::ActionsData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedActionsDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::ActionsData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_ACTIONS_STEAMROT_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_THEMES_STEAMROT_THEMES_H_
#define FLATBUFFERS_GENERATED_THEMES_STEAMROT_THEMES_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace steamrot {
namespace themes {

struct Color;

struct Button;
struct ButtonBuilder;

struct UIObjects;
struct UIObjectsBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) Color FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t r_;
  uint8_t g_;
  uint8_t b_;
  uint8_t a_;

 public:
  Color()
      : r_(0),
        g_(0),
        b_(0),
        a_(0) {
  }
  Color(uint8_t _r, uint8_t _g, uint8_t _b, uint8_t _a)
      : r_(::flatbuffers::EndianScalar(_r)),
        g_(::flatbuffers::EndianScalar(_g)),
        b_(::flatbuffers::EndianScalar(_b)),
        a_(::flatbuffers::EndianScalar(_a)) {
  }
  uint8_t r() const {
    return ::flatbuffers::EndianScalar(r_);
  }
  uint8_t g() const {
    return ::flatbuffers::EndianScalar(g_);
  }
  uint8_t b() const {
    return ::flatbuffers::EndianScalar(b_);
  }
  uint8_t a() const {
    return ::flatbuffers::EndianScalar(a_);
  }
};
FLATBUFFERS_STRUCT_END(Color, 4);

struct Button FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ButtonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BACKGROUND_COLOR = 4,
    VT_TEXT_COLOR = 6,
    VT_BORDER_COLOR = 8
  };
  const steamrot::themes::Color *background_color() const {
    return GetStruct<const steamrot::themes::Color *>(VT_BACKGROUND_COLOR);
  }
  const steamrot::themes::Color *text_color() const {
    return GetStruct<const steamrot::themes::Color *>(VT_TEXT_COLOR);
  }
  const steamrot::themes::Color *border_color() const {
    return GetStruct<const steamrot::themes::Color *>(VT_BORDER_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<steamrot::themes::Color>(verifier, VT_BACKGROUND_COLOR, 1) &&
           VerifyField<steamrot::themes::Color>(verifier, VT_TEXT_COLOR, 1) &&
           VerifyField<steamrot::themes::Color>(verifier, VT_BORDER_COLOR, 1) &&
           verifier.EndTable();
  }
};

struct ButtonBuilder {
  typedef Button Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_background_color(const steamrot::themes::Color *background_color) {
    fbb_.AddStruct(Button::VT_BACKGROUND_COLOR, background_color);
  }
  void add_text_color(const steamrot::themes::Color *text_color) {
    fbb_.AddStruct(Button::VT_TEXT_COLOR, text_color);
  }
  void add_border_color(const steamrot::themes::Color *border_color) {
    fbb_.AddStruct(Button::VT_BORDER_COLOR, border_color);
  }
  explicit ButtonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Button> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Button>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Button> CreateButton(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const steamrot::themes::Color *background_color = nullptr,
    const steamrot::themes::Color *text_color = nullptr,
    const steamrot::themes::Color *border_color = nullptr) {
  ButtonBuilder builder_(_fbb);
  builder_.add_border_color(border_color);
  builder_.add_text_color(text_color);
  builder_.add_background_color(background_color);
  return builder_.Finish();
}

struct UIObjects FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UIObjectsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BUTTON = 4
  };
  const steamrot::themes::Button *button() const {
    return GetPointer<const steamrot::themes::Button *>(VT_BUTTON);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BUTTON) &&
           verifier.VerifyTable(button()) &&
           verifier.EndTable();
  }
};

struct UIObjectsBuilder {
  typedef UIObjects Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_button(::flatbuffers::Offset<steamrot::themes::Button> button) {
    fbb_.AddOffset(UIObjects::VT_BUTTON, button);
  }
  explicit UIObjectsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UIObjects> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UIObjects>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UIObjects> CreateUIObjects(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::themes::Button> button = 0) {
  UIObjectsBuilder builder_(_fbb);
  builder_.add_button(button);
  return builder_.Finish();
}

inline const steamrot::themes::UIObjects *GetUIObjects(const void *buf) {
  return ::flatbuffers::GetRoot<steamrot::themes::UIObjects>(buf);
}

inline const steamrot::themes::UIObjects *GetSizePrefixedUIObjects(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<steamrot::themes::UIObjects>(buf);
}

inline bool VerifyUIObjectsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<steamrot::themes::UIObjects>(nullptr);
}

inline bool VerifySizePrefixedUIObjectsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<steamrot::themes::UIObjects>(nullptr);
}

inline void FinishUIObjectsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::themes::UIObjects> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUIObjectsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::themes::UIObjects> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace themes
}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_THEMES_STEAMROT_THEMES_H_

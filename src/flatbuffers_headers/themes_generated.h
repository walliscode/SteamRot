// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_THEMES_STEAMROT_THEMES_H_
#define FLATBUFFERS_GENERATED_THEMES_STEAMROT_THEMES_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "types_generated.h"

namespace steamrot {
namespace themes {

struct Color;

struct Style;
struct StyleBuilder;

struct PanelStyle;
struct PanelStyleBuilder;

struct ButtonStyle;
struct ButtonStyleBuilder;

struct UIObjects;
struct UIObjectsBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) Color FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t r_;
  uint8_t g_;
  uint8_t b_;
  uint8_t a_;

 public:
  Color()
      : r_(0),
        g_(0),
        b_(0),
        a_(0) {
  }
  Color(uint8_t _r, uint8_t _g, uint8_t _b, uint8_t _a)
      : r_(::flatbuffers::EndianScalar(_r)),
        g_(::flatbuffers::EndianScalar(_g)),
        b_(::flatbuffers::EndianScalar(_b)),
        a_(::flatbuffers::EndianScalar(_a)) {
  }
  uint8_t r() const {
    return ::flatbuffers::EndianScalar(r_);
  }
  uint8_t g() const {
    return ::flatbuffers::EndianScalar(g_);
  }
  uint8_t b() const {
    return ::flatbuffers::EndianScalar(b_);
  }
  uint8_t a() const {
    return ::flatbuffers::EndianScalar(a_);
  }
};
FLATBUFFERS_STRUCT_END(Color, 4);

struct Style FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StyleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BACKGROUND_COLOR = 4,
    VT_BORDER_COLOR = 6,
    VT_BORDER_THICKNESS = 8,
    VT_RADIUS_RESOLUTION = 10,
    VT_INNER_MARGIN = 12
  };
  const steamrot::themes::Color *background_color() const {
    return GetStruct<const steamrot::themes::Color *>(VT_BACKGROUND_COLOR);
  }
  const steamrot::themes::Color *border_color() const {
    return GetStruct<const steamrot::themes::Color *>(VT_BORDER_COLOR);
  }
  float border_thickness() const {
    return GetField<float>(VT_BORDER_THICKNESS, 0.0f);
  }
  int32_t radius_resolution() const {
    return GetField<int32_t>(VT_RADIUS_RESOLUTION, 0);
  }
  const Vector2f *inner_margin() const {
    return GetPointer<const Vector2f *>(VT_INNER_MARGIN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<steamrot::themes::Color>(verifier, VT_BACKGROUND_COLOR, 1) &&
           VerifyField<steamrot::themes::Color>(verifier, VT_BORDER_COLOR, 1) &&
           VerifyField<float>(verifier, VT_BORDER_THICKNESS, 4) &&
           VerifyField<int32_t>(verifier, VT_RADIUS_RESOLUTION, 4) &&
           VerifyOffset(verifier, VT_INNER_MARGIN) &&
           verifier.VerifyTable(inner_margin()) &&
           verifier.EndTable();
  }
};

struct StyleBuilder {
  typedef Style Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_background_color(const steamrot::themes::Color *background_color) {
    fbb_.AddStruct(Style::VT_BACKGROUND_COLOR, background_color);
  }
  void add_border_color(const steamrot::themes::Color *border_color) {
    fbb_.AddStruct(Style::VT_BORDER_COLOR, border_color);
  }
  void add_border_thickness(float border_thickness) {
    fbb_.AddElement<float>(Style::VT_BORDER_THICKNESS, border_thickness, 0.0f);
  }
  void add_radius_resolution(int32_t radius_resolution) {
    fbb_.AddElement<int32_t>(Style::VT_RADIUS_RESOLUTION, radius_resolution, 0);
  }
  void add_inner_margin(::flatbuffers::Offset<Vector2f> inner_margin) {
    fbb_.AddOffset(Style::VT_INNER_MARGIN, inner_margin);
  }
  explicit StyleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Style> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Style>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Style> CreateStyle(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const steamrot::themes::Color *background_color = nullptr,
    const steamrot::themes::Color *border_color = nullptr,
    float border_thickness = 0.0f,
    int32_t radius_resolution = 0,
    ::flatbuffers::Offset<Vector2f> inner_margin = 0) {
  StyleBuilder builder_(_fbb);
  builder_.add_inner_margin(inner_margin);
  builder_.add_radius_resolution(radius_resolution);
  builder_.add_border_thickness(border_thickness);
  builder_.add_border_color(border_color);
  builder_.add_background_color(background_color);
  return builder_.Finish();
}

struct PanelStyle FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PanelStyleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STYLE = 4
  };
  const steamrot::themes::Style *style() const {
    return GetPointer<const steamrot::themes::Style *>(VT_STYLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STYLE) &&
           verifier.VerifyTable(style()) &&
           verifier.EndTable();
  }
};

struct PanelStyleBuilder {
  typedef PanelStyle Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_style(::flatbuffers::Offset<steamrot::themes::Style> style) {
    fbb_.AddOffset(PanelStyle::VT_STYLE, style);
  }
  explicit PanelStyleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PanelStyle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PanelStyle>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PanelStyle> CreatePanelStyle(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::themes::Style> style = 0) {
  PanelStyleBuilder builder_(_fbb);
  builder_.add_style(style);
  return builder_.Finish();
}

struct ButtonStyle FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ButtonStyleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STYLE = 4
  };
  const steamrot::themes::Style *style() const {
    return GetPointer<const steamrot::themes::Style *>(VT_STYLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STYLE) &&
           verifier.VerifyTable(style()) &&
           verifier.EndTable();
  }
};

struct ButtonStyleBuilder {
  typedef ButtonStyle Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_style(::flatbuffers::Offset<steamrot::themes::Style> style) {
    fbb_.AddOffset(ButtonStyle::VT_STYLE, style);
  }
  explicit ButtonStyleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ButtonStyle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ButtonStyle>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ButtonStyle> CreateButtonStyle(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::themes::Style> style = 0) {
  ButtonStyleBuilder builder_(_fbb);
  builder_.add_style(style);
  return builder_.Finish();
}

struct UIObjects FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UIObjectsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PANEL_STYLE = 4,
    VT_BUTTON_STYLE = 6
  };
  const steamrot::themes::PanelStyle *panel_style() const {
    return GetPointer<const steamrot::themes::PanelStyle *>(VT_PANEL_STYLE);
  }
  const steamrot::themes::ButtonStyle *button_style() const {
    return GetPointer<const steamrot::themes::ButtonStyle *>(VT_BUTTON_STYLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PANEL_STYLE) &&
           verifier.VerifyTable(panel_style()) &&
           VerifyOffset(verifier, VT_BUTTON_STYLE) &&
           verifier.VerifyTable(button_style()) &&
           verifier.EndTable();
  }
};

struct UIObjectsBuilder {
  typedef UIObjects Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_panel_style(::flatbuffers::Offset<steamrot::themes::PanelStyle> panel_style) {
    fbb_.AddOffset(UIObjects::VT_PANEL_STYLE, panel_style);
  }
  void add_button_style(::flatbuffers::Offset<steamrot::themes::ButtonStyle> button_style) {
    fbb_.AddOffset(UIObjects::VT_BUTTON_STYLE, button_style);
  }
  explicit UIObjectsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UIObjects> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UIObjects>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UIObjects> CreateUIObjects(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<steamrot::themes::PanelStyle> panel_style = 0,
    ::flatbuffers::Offset<steamrot::themes::ButtonStyle> button_style = 0) {
  UIObjectsBuilder builder_(_fbb);
  builder_.add_button_style(button_style);
  builder_.add_panel_style(panel_style);
  return builder_.Finish();
}

inline const steamrot::themes::UIObjects *GetUIObjects(const void *buf) {
  return ::flatbuffers::GetRoot<steamrot::themes::UIObjects>(buf);
}

inline const steamrot::themes::UIObjects *GetSizePrefixedUIObjects(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<steamrot::themes::UIObjects>(buf);
}

inline bool VerifyUIObjectsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<steamrot::themes::UIObjects>(nullptr);
}

inline bool VerifySizePrefixedUIObjectsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<steamrot::themes::UIObjects>(nullptr);
}

inline void FinishUIObjectsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::themes::UIObjects> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUIObjectsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<steamrot::themes::UIObjects> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace themes
}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_THEMES_STEAMROT_THEMES_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UISTATE_STEAMROT_H_
#define FLATBUFFERS_GENERATED_UISTATE_STEAMROT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace steamrot {

struct UIStateMapping;
struct UIStateMappingBuilder;

struct UIStateData;
struct UIStateDataBuilder;

struct UIStateMapping FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UIStateMappingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE_KEY = 4,
    VT_UI_NAMES = 6
  };
  const ::flatbuffers::String *state_key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATE_KEY);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ui_names() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_UI_NAMES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_STATE_KEY) &&
           verifier.VerifyString(state_key()) &&
           VerifyOffsetRequired(verifier, VT_UI_NAMES) &&
           verifier.VerifyVector(ui_names()) &&
           verifier.VerifyVectorOfStrings(ui_names()) &&
           verifier.EndTable();
  }
};

struct UIStateMappingBuilder {
  typedef UIStateMapping Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_state_key(::flatbuffers::Offset<::flatbuffers::String> state_key) {
    fbb_.AddOffset(UIStateMapping::VT_STATE_KEY, state_key);
  }
  void add_ui_names(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ui_names) {
    fbb_.AddOffset(UIStateMapping::VT_UI_NAMES, ui_names);
  }
  explicit UIStateMappingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UIStateMapping> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UIStateMapping>(end);
    fbb_.Required(o, UIStateMapping::VT_STATE_KEY);
    fbb_.Required(o, UIStateMapping::VT_UI_NAMES);
    return o;
  }
};

inline ::flatbuffers::Offset<UIStateMapping> CreateUIStateMapping(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> state_key = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ui_names = 0) {
  UIStateMappingBuilder builder_(_fbb);
  builder_.add_ui_names(ui_names);
  builder_.add_state_key(state_key);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UIStateMapping> CreateUIStateMappingDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *state_key = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ui_names = nullptr) {
  auto state_key__ = state_key ? _fbb.CreateString(state_key) : 0;
  auto ui_names__ = ui_names ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ui_names) : 0;
  return steamrot::CreateUIStateMapping(
      _fbb,
      state_key__,
      ui_names__);
}

struct UIStateData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UIStateDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAPPINGS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIStateMapping>> *mappings() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIStateMapping>> *>(VT_MAPPINGS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_MAPPINGS) &&
           verifier.VerifyVector(mappings()) &&
           verifier.VerifyVectorOfTables(mappings()) &&
           verifier.EndTable();
  }
};

struct UIStateDataBuilder {
  typedef UIStateData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_mappings(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIStateMapping>>> mappings) {
    fbb_.AddOffset(UIStateData::VT_MAPPINGS, mappings);
  }
  explicit UIStateDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UIStateData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UIStateData>(end);
    fbb_.Required(o, UIStateData::VT_MAPPINGS);
    return o;
  }
};

inline ::flatbuffers::Offset<UIStateData> CreateUIStateData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<steamrot::UIStateMapping>>> mappings = 0) {
  UIStateDataBuilder builder_(_fbb);
  builder_.add_mappings(mappings);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UIStateData> CreateUIStateDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<steamrot::UIStateMapping>> *mappings = nullptr) {
  auto mappings__ = mappings ? _fbb.CreateVector<::flatbuffers::Offset<steamrot::UIStateMapping>>(*mappings) : 0;
  return steamrot::CreateUIStateData(
      _fbb,
      mappings__);
}

}  // namespace steamrot

#endif  // FLATBUFFERS_GENERATED_UISTATE_STEAMROT_H_

/////////////////////////////////////////////////
/// @file
/// @brief Declaration of the abstract Logic class
/////////////////////////////////////////////////

/////////////////////////////////////////////////
/// Preprocessor Directives
/////////////////////////////////////////////////
#pragma once

/////////////////////////////////////////////////
/// Headers
/////////////////////////////////////////////////
#include "ArchetypeManager.h"
#include "AssetManager.h"
#include "EventHandler.h"
#include "containers.h"
#include "themes_generated.h"
#include <SFML/Graphics/RenderTexture.hpp>
namespace steamrot {

using EntityIndicies = std::vector<size_t>;

/////////////////////////////////////////////////
/// @class LogicContext
/// @brief Contains all the context required for logic processing.
///
/////////////////////////////////////////////////
struct LogicContext {
  /////////////////////////////////////////////////
  /// @brief Reference to the EntityMemoryPool for the Scene the Logic lives in.
  /////////////////////////////////////////////////
  EntityMemoryPool &scene_entities;

  /////////////////////////////////////////////////
  /// @brief Reference to the available archetypes in the Scene.
  /////////////////////////////////////////////////
  const std::unordered_map<ArchetypeID, Archetype> &archetypes;

  /////////////////////////////////////////////////
  /// @brief Reference to the RenderTexture for the Scene.
  /////////////////////////////////////////////////
  sf::RenderTexture &scene_texture;

  /////////////////////////////////////////////////
  /// @brief Reference to the game window.
  /////////////////////////////////////////////////
  sf::RenderWindow &game_window;

  /////////////////////////////////////////////////
  /// @brief Reference to the UI configuration for the game.
  /////////////////////////////////////////////////
  const themes::UIObjects *ui_config{nullptr};

  /////////////////////////////////////////////////
  /// @brief Reference to the AssetManager for the game.
  /////////////////////////////////////////////////
  const AssetManager &asset_manager;

  /////////////////////////////////////////////////
  /// @brief Reference to the EventHandler for the game.
  ///
  /// This contains the global event bus and is used to adapt other events.
  /////////////////////////////////////////////////
  EventHandler &event_handler;
};

/////////////////////////////////////////////////
/// @class Logic
/// @brief Abstract base class for all logic processing in the game.
///
/////////////////////////////////////////////////
class Logic {
protected:
  /////////////////////////////////////////////////
  /// @brief Collates all the logic functions in a single convenience function.
  /////////////////////////////////////////////////
  virtual void ProcessLogic() = 0;

  /////////////////////////////////////////////////
  /// @brief Contains an instance of the LogicContest struct.
  /////////////////////////////////////////////////
  LogicContext m_logic_context;

public:
  /////////////////////////////////////////////////
  /// @brief Constructor for the Logic class.
  ///
  /// @param logic_context Instance of the LogicContext struct
  /////////////////////////////////////////////////
  Logic(const LogicContext logic_context);

  /////////////////////////////////////////////////
  /// @brief Default destructor for the Logic class.
  /////////////////////////////////////////////////
  virtual ~Logic() = default;

  /////////////////////////////////////////////////
  /// @brief Interface function to run the logic processing.
  ///
  /// This function should be the only interface function called by the game
  /// loop. Here we can add in any frequency modifiers or other logic that needs
  /// to be run
  /////////////////////////////////////////////////
  void RunLogic();
};
} // namespace steamrot

/////////////////////////////////////////////////
/// @file
/// @brief declaration of the LogicContext struct
/////////////////////////////////////////////////

/////////////////////////////////////////////////
/// Preprocessor Directives
/////////////////////////////////////////////////
#pragma once

/////////////////////////////////////////////////
/// Headers
/////////////////////////////////////////////////

#include "ArchetypeManager.h"
#include "AssetManager.h"
#include "EventHandler.h"
#include "UIStyle.h"
#include "containers.h"
#include <SFML/Graphics/RenderTexture.hpp>
#include <memory>
#include <unordered_map>

namespace steamrot {
/////////////////////////////////////////////////
/// @class LogicContext
/// @brief Contains all the context required for logic processing.
///
/////////////////////////////////////////////////
struct LogicContext {
  /////////////////////////////////////////////////
  /// @brief Reference to the EntityMemoryPool for the Scene the Logic lives in.
  /////////////////////////////////////////////////
  EntityMemoryPool &scene_entities;

  /////////////////////////////////////////////////
  /// @brief Reference to the available archetypes in the Scene.
  /////////////////////////////////////////////////
  const std::unordered_map<ArchetypeID, Archetype> &archetypes;

  /////////////////////////////////////////////////
  /// @brief Reference to the RenderTexture for the Scene.
  /////////////////////////////////////////////////
  sf::RenderTexture &scene_texture;

  /////////////////////////////////////////////////
  /// @brief Reference to the game window.
  /////////////////////////////////////////////////
  sf::RenderWindow &game_window;

  /////////////////////////////////////////////////
  /// @brief Reference to the AssetManager for the game.
  /////////////////////////////////////////////////
  const AssetManager &asset_manager;

  /////////////////////////////////////////////////
  /// @brief Reference to the EventHandler for the game.
  ///
  /// This contains the global event bus and is used to adapt other events.
  /////////////////////////////////////////////////
  EventHandler &event_handler;

  /////////////////////////////////////////////////
  /// @brief Style map containing all available UI styles. Should be the only
  /// instance
  /////////////////////////////////////////////////
  std::shared_ptr<std::unordered_map<std::string, UIStyle>> ui_styles{nullptr};
};
} // namespace steamrot

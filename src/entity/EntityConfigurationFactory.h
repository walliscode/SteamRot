////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "containers.h"

#include <memory>
#include <nlohmann/json.hpp>
#include <string>

using json = nlohmann::json;
namespace steamrot {

class EntityConfigurationFactory {
private:
  ////////////////////////////////////////////////////////////
  // Member data
  ////////////////////////////////////////////////////////////
  std::string m_scene_id;

public:
  ////////////////////////////////////////////////////////////
  /// |brief Default constructor
  ///
  ////////////////////////////////////////////////////////////
  EntityConfigurationFactory(const std::string &scene_id);

  ////////////////////////////////////////////////////////////
  /// |brief Configure entities (overload this function per data type)
  ///
  ////////////////////////////////////////////////////////////
  void
  ConfigureEntities(std::unique_ptr<components::containers::EntityMemoryPool>,
                    json &data);
};

} // namespace steamrot

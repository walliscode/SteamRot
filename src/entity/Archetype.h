////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "ComponentFlags.h"
#include <cstdlib>
#include <vector>

class Archetype {
private:
  ////////////////////////////////////////////////////////////
  // Member data
  ////////////////////////////////////////////////////////////

  std::vector<size_t> m_entities;
  steamrot::ComponentFlags m_id;

public:
  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ///
  ////////////////////////////////////////////////////////////
  Archetype(const steamrot::ComponentFlags &archetype_components);

  ////////////////////////////////////////////////////////////
  /// \brief returns the ID of the archetype
  ///
  ////////////////////////////////////////////////////////////
  const steamrot::ComponentFlags &GetID() const;

  ////////////////////////////////////////////////////////////
  /// \brief returns the entities in the archetype (as indexes of a vector)
  ///
  ////////////////////////////////////////////////////////////
  const std::vector<size_t> &GetEntities() const;

  ////////////////////////////////////////////////////////////
  /// \brief adds an entity to the archetype
  ///
  ////////////////////////////////////////////////////////////
  void AddEntityToArchetype(size_t entity_id);

  ////////////////////////////////////////////////////////////
  /// \brief Removes an entity from the archetype
  ///
  ////////////////////////////////////////////////////////////
  void RemoveEntityFromArchetype(size_t entity_id);

  ////////////////////////////////////////////////////////////
  /// \brief checks if the archetype contains an entity
  ///
  ////////////////////////////////////////////////////////////
  const bool ContainsEntity(size_t entity) const;
};

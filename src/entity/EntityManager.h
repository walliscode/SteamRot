////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////

#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "ArchetypeManager.h"
#include "EntityConfigurationFactory.h"

#include "containers.h"
#include "entities_generated.h"
#include <cstddef>

#include <memory>
#include <nlohmann/json.hpp>
#include <vector>

using json = nlohmann::json;

namespace steamrot {

class EntityManager {

private:
  ////////////////////////////////////////////////////////////
  // Member data
  ////////////////////////////////////////////////////////////

  std::vector<size_t> m_entities;
  std::vector<size_t> m_entities_to_add;
  std::vector<size_t> m_entities_to_remove;
  std::unique_ptr<components::containers::EntityMemoryPool> m_pool;
  ArchetypeManager m_archetype_manager;
  EntityConfigurationFactory m_entity_configuration_factory;

public:
  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ///
  ////////////////////////////////////////////////////////////
  EntityManager(const size_t &pool_size, const EntitiesData *entities_data);

  ////////////////////////////////////////////////////////////
  /// \brief Resuze the memory pool
  ///
  ////////////////////////////////////////////////////////////
  void ResizePool(const size_t &pool_size);

  ////////////////////////////////////////////////////////////
  /// \brief return index of next "free" entity
  ///
  ////////////////////////////////////////////////////////////
  size_t GetNextFreeEntityIndex();

  ////////////////////////////////////////////////////////////
  /// \brief "activate" an entity by finding the next inactive entity index
  ///
  ////////////////////////////////////////////////////////////
  size_t AddEntity();

  ////////////////////////////////////////////////////////////
  /// |brief add entity to the waiting room for removal
  ///
  ////////////////////////////////////////////////////////////
  void RemoveEntity(size_t entity_index);

  ////////////////////////////////////////////////////////////
  /// |brief update the waiting rooms for addition and removal
  ///
  ////////////////////////////////////////////////////////////
  void UpdateWaitingRooms();
};
} // namespace steamrot

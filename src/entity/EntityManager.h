/////////////////////////////////////////////////
/// @file
/// @brief Declaration of the EntityManager class
/////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////

#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "ArchetypeManager.h"
#include "containers.h"
#include <cstddef>

namespace steamrot {

/////////////////////////////////////////////////
/// @class EntityManager
/// @brief The EntityManager class is responsiblle for managing entity lifetimes
/// and the access to the memory pool.
///
/////////////////////////////////////////////////
class EntityManager {

private:
  /////////////////////////////////////////////////
  /// @brief Member variable to hold all the entities/components for a scene.
  /////////////////////////////////////////////////
  components::containers::EntityMemoryPool m_pool;

  /////////////////////////////////////////////////
  /// @brief Holds the archetype manager instance for this EntityManager and
  /// this Scene
  /////////////////////////////////////////////////
  ArchetypeManager m_archetype_manager;

public:
  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ///
  ////////////////////////////////////////////////////////////
  EntityManager(const size_t &pool_size);

  /////////////////////////////////////////////////
  /// @brief Get a read/write reference to the entity memory pool
  /////////////////////////////////////////////////
  components::containers::EntityMemoryPool &GetEntityMemoryPool();

  /////////////////////////////////////////////////
  /// @brief Get a reference to the archetype manager
  ///
  /////////////////////////////////////////////////
  const ArchetypeManager &GetArchetypeManager();

  /////////////////////////////////////////////////
  /// @brief Resize the entity memory pool
  ///
  /// @param pool_size Number of entities to reserve space for in the pool
  /////////////////////////////////////////////////
  void ResizePool(const size_t &pool_size);

  ////////////////////////////////////////////////////////////
  /// \brief return index of next "free" entity
  ///
  ////////////////////////////////////////////////////////////
  size_t GetNextFreeEntityIndex();
};
} // namespace steamrot

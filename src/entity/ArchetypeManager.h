/////////////////////////////////////////////////
/// @file
/// @brief Declaration of the ArchetypeManager class
/////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "ArchetypeHelpers.h"
#include "FailInfo.h"
#include "containers.h"
#include <cstddef>
#include <cstdlib>
#include <expected>
#include <unordered_map>
#include <variant>
#include <vector>

namespace steamrot {
////////////////////////////////////////////////////////////
// typedefs
////////////////////////////////////////////////////////////
using Archetype = std::vector<size_t>;

/////////////////////////////////////////////////
/// @class ArchetypeManager
/// @brief Manages the creation and retrieval of Archetypes
///
/////////////////////////////////////////////////
class ArchetypeManager {
private:
  /////////////////////////////////////////////////
  /// @brief Contains all archetypes for (this->Scenes) entity memory pool.
  /////////////////////////////////////////////////
  std::unordered_map<ArchetypeID, Archetype> m_archetypes;

  /////////////////////////////////////////////////
  /// @brief Reference to the EntityMemoryPool in the scene.
  /////////////////////////////////////////////////
  const EntityMemoryPool &m_entity_memory_pool;

  /////////////////////////////////////////////////
  /// @brief Inspects the entity memory pool and that index and generates an ID
  ///
  /// @param entity_index Index of the entity to generate an ArchetypeID for.
  /////////////////////////////////////////////////
  std::expected<const ArchetypeID, FailInfo>
  GenerateArchetypeID(size_t entity_index);

public:
  /////////////////////////////////////////////////
  /// @brief Constructor for the ArchetypeManager class taking an
  /// EntityMemoryPool reference.
  ///
  /// @param entity_memory_pool Reference to the EntityMemoryPool in the scene.
  /////////////////////////////////////////////////
  ArchetypeManager(const EntityMemoryPool &entity_memory_pool);

  /////////////////////////////////////////////////
  /// @brief Returns the entity indexes for the given archetype IDs.
  ///
  /// @param An almgamated vector of ArchetypeIDs.
  /////////////////////////////////////////////////
  std::vector<size_t>
  GetEntityIndexes(const std::vector<ArchetypeID> &archtype_IDs) const;

  /////////////////////////////////////////////////
  /// @brief Clears current archetypes and generates all archetypes
  ///
  /// @param entity_memory_pool Reference to the EntityMemoryPool in the scene
  /////////////////////////////////////////////////
  std::expected<std::monostate, FailInfo> GenerateAllArchetypes();

  /////////////////////////////////////////////////
  /// @brief Returns the archetypes map.
  /////////////////////////////////////////////////
  const std::unordered_map<ArchetypeID, Archetype> &GetArchetypes() const;
};

} // namespace steamrot

////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include "containers.h"
#include <bitset>
#include <cstddef>
#include <cstdlib>
#include <unordered_map>
#include <vector>

////////////////////////////////////////////////////////////
// typedefs
////////////////////////////////////////////////////////////
using Archetype = std::vector<size_t>;

using ArchetypeID =
    std::bitset<steamrot::components::containers::kComponentRegisterSize>;
////////////////////////////////////////////////////////////
// class ArchetypeManager
////////////////////////////////////////////////////////////
class ArchetypeManager {
private:
  ////////////////////////////////////////////////////////////
  // Member data
  ////////////////////////////////////////////////////////////
  std::unordered_map<ArchetypeID, Archetype> m_archetypes;

public:
  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ///
  ////////////////////////////////////////////////////////////
  ArchetypeManager();

  ////////////////////////////////////////////////////////////
  /// \brief returns an all entity indexes from provided ArchetypeIDs
  ///
  ////////////////////////////////////////////////////////////
  std::vector<size_t>
  GetEntityIndexes(const std::vector<ArchetypeID> &archtype_IDs) const;
};

////////////////////////////////////////////////////////////
// Preprocessor directives
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Archetype.h"
#include <cstdlib>
#include <memory>
#include <vector>

class ArchetypeManager {
private:
  ////////////////////////////////////////////////////////////
  // Member data
  ////////////////////////////////////////////////////////////
  std::vector<Archetype> m_archetypes;

public:
  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ///
  ////////////////////////////////////////////////////////////
  ArchetypeManager();

  ////////////////////////////////////////////////////////////
  /// \brief returns Archetype that matches the provided Components
  ///
  ////////////////////////////////////////////////////////////
  const Archetype &GetExactArchetype(
      const steamrot::ComponentFlags &archetype_requirements) const;

  ////////////////////////////////////////////////////////////
  /// \brief returns Entites from Archetype that matches provided Components
  /// An "and" approach
  ////////////////////////////////////////////////////////////
  const std::vector<size_t> &GetExactArchetypeEntities(
      const steamrot::ComponentFlags &archetype_requirements) const;

  ////////////////////////////////////////////////////////////
  /// \brief returns a pointer to a vector that contains any combination of
  /// Archetypes that match the provided Components. an "or" approach
  ///
  ////////////////////////////////////////////////////////////
  const std::shared_ptr<std::vector<Archetype>> GetInclusiveArchetype(
      const steamrot::ComponentFlags &archetype_requirements) const;

  ////////////////////////////////////////////////////////////
  /// \brief returns entities contained by GetInclusiveArchetype
  ///
  ///
  ////////////////////////////////////////////////////////////

  const std::shared_ptr<std::vector<size_t>> GetInclusiveArchetypeEntities(
      const steamrot::ComponentFlags &archetype_requirements) const;
};
